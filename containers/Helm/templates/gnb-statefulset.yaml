{{/* Helpers */}}
{{- define "selectNode" -}}
{{- $vals := .vals -}}
{{- $role := .role -}}
{{- if and $vals.splitDeployment (eq $role "cu") ($vals.nodeSelector.cuHostname) -}}
kubernetes.io/hostname: {{ $vals.nodeSelector.cuHostname }}
{{- else if and $vals.splitDeployment (eq $role "du") ($vals.nodeSelector.duHostname) -}}
kubernetes.io/hostname: {{ $vals.nodeSelector.duHostname }}
{{- else -}}
kubernetes.io/hostname: {{ $vals.nodeSelector.hostname }}
{{- end -}}
{{- end -}}

{{- $V := .Values -}}
{{- $R := .Release -}}
{{- $baseProxy := (default 30450 $V.jbpf.port) -}}
{{- $baseUDP   := (default 30502 $V.udp_forwarder.port) -}}
{{- $jbpfPath  := (default "/var/run/jbpf/ipc" $V.jbpf.cfg.jbpf_run_path) -}}
{{- $jbpfNS    := (default "jbpf" $V.jbpf.cfg.jbpf_namespace) -}}
{{- $lcmName   := (default "jbpf_lcm_ipc" $V.jbpf.cfg.jbpf_lcm_ipc_name) -}}
{{- $ran_cnt := 0 | int -}}

{{- range $ran_name, $du := $V.duConfigs }}

{{- if not $V.splitDeployment }}

########################################
# Monolithic (stacked) CU+DU StatefulSet
########################################
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: srs-stack-{{ $ran_name }}
  namespace: {{ $R.Namespace }}
  labels:
    app: srs-stack-{{ $ran_name }}
spec:
  serviceName: srs-stack-{{ $ran_name }}
  selector:
    matchLabels:
      app: srs-stack-{{ $ran_name }}
  template:
    metadata:
      labels:
        app: srs-stack-{{ $ran_name }}
      {{- if $V.sriov.enabled }}
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            { "name": "srs-sriov-cu" }
            {{- range $idx_c, $cell := $du.cells }}
            ,{ "name": "srs-{{ $ran_name }}-sriov-fh-instance-{{ $idx_c }}" }
            {{- end }}
          ]
      {{- end }}
    spec:
      serviceAccountName: srs-service-account
      automountServiceAccountToken: true
      nodeSelector:
        {{- include "selectNode" (dict "vals" $V "role" "du") | nindent 8 }}
      terminationGracePeriodSeconds: 0
      {{- if $V.image.pullSecret }}
      imagePullSecrets:
        - name: {{ $V.image.pullSecret }}
      {{- end }}
      volumes:
        - name: dshm
          hostPath: { path: /dev/shm }
        - name: hugepage
          hostPath: { path: /dev/hugepages }
        - name: sys
          hostPath: { path: /sys }
        - name: dev
          hostPath: { path: /dev }
        - name: varjbpf
          hostPath:
            path: "{{ $jbpfPath }}/{{ $jbpfNS }}"
        {{- if $V.jbpf.codelets_vol_mount }}
        - name: codelets
          hostPath:
            path: {{ $V.jbpf.codelets_vol_mount | quote }}
        {{- end }}
        - name: du-config-volume
          configMap:
            name: srs-gnb-cm-{{ $ran_name }}
        - name: jrtc-config
          configMap:
            name: jrtc-config

      containers:
        {{- if $V.troubleshooter.enabled }}
        - name: troubleshooter
          image: {{ $V.troubleshooter.image }}
          command: ["/bin/sh","-c","--"]
          args: ["while true; do sleep 30; done;"]
        {{- end }}

        {{- if $V.udp_forwarder.enabled }}
        - name: udpforwarder
          image: {{ $V.image.srs_jbpf }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          env:
            {{- if $V.sriov.enabled }}
            - name: LISTEN_IP
              value: {{ $V.sriov.cucp_ip | quote }}
            {{- else }}
            - name: LISTEN_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- end }}
            - name: LISTEN_PORT
              value: {{ (add $baseUDP $ran_cnt) | quote }}
            - name: FORWARD_IP
              value: jrtc-udp-input-{{ $ran_name }}.{{ $R.Namespace }}.svc.cluster.local
            - name: FORWARD_PORT
              value: {{ $baseUDP | quote }}
          command: ["/bin/sh","-c"]
          args: [{{ if $V.debug_mode.enabled }}"sleep 99999999d"{{ else }}"/udp_forwarder/udp_forwarder.sh"{{ end }}]
        {{- end }}

        # Role container (monolithic keeps 'du' name)
        - name: du
          image: {{ $V.image.srs_jbpf }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: hugepage
              mountPath: /dev/hugepages
            - name: sys
              mountPath: /sys/
            - name: dev
              mountPath: /dev/
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
            {{- if $V.jbpf.codelets_vol_mount }}
            - name: codelets
              mountPath: /codelets
            {{- end }}
            - name: du-config-volume
              mountPath: /du-config
              readOnly: true
          command: ["/bin/sh","-c"]
          args: [{{ if $V.debug_mode.enabled }}"sleep 99999999d"{{ else }}"/opt/Scripts/run.sh"{{ end }}]
          env:
            - name: ROLE
              value: "DU"
            - name: DEBUG_MODE
              value: {{ $V.debug_mode.enabled | quote }}
            - name: JBPF_CODELETS
              value: "/codelets"
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: {{ $V.resources.gnb.limits.cpu }}
              memory: {{ $V.resources.gnb.limits.memory }}
              hugepages-1Gi: {{ $V.resources.gnb.limits.hugepages1Gi }}
              {{- if $V.sriov.enabled }}
              {{- if $V.sriov.resourceName }}
              {{ $V.sriov.resourceName }}: 1
              {{- end }}
              {{- range $cell := $du.cells }}
              {{ $cell.ruDPDKResource }}: 1
              {{- end }}
              {{- end }}
            requests:
              cpu: {{ $V.resources.gnb.requests.cpu }}
              memory: {{ $V.resources.gnb.requests.memory }}
              hugepages-1Gi: {{ $V.resources.gnb.requests.hugepages1Gi }}
              {{- if $V.sriov.enabled }}
              {{- if $V.sriov.resourceName }}
              {{ $V.sriov.resourceName }}: 1
              {{- end }}
              {{- range $cell := $du.cells }}
              {{ $cell.ruDPDKResource }}: 1
              {{- end }}
              {{- end }}

        - name: srs-gnb-proxy
          image: {{ $V.image.srs_jbpf_proxy }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          {{- if $V.debug_mode.enabled }}
          command: ["/bin/sh","-c"]
          args: ["sleep 99999999d"]
          {{- else }}
          command: ["/src/out/bin/srsran_reverse_proxy"]
          args:
            - "--host-port"
            - "{{ add $baseProxy $ran_cnt }}"
            - "--address"
            - "{{ printf "%s/%s/%s" $jbpfPath $jbpfNS $lcmName }}"
          {{- end }}
          volumeMounts:
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
            {{- if $V.jbpf.codelets_vol_mount }}
            - name: codelets
              mountPath: /codelets
            {{- end }}
          env:
            - name: JBPF_CODELETS
              value: "/codelets"
          resources:
            limits:
              {{- toYaml $V.resources.jbpf_proxy.limits | nindent 14 }}
            requests:
              {{- toYaml $V.resources.jbpf_proxy.requests | nindent 14 }}

        - name: jrtc
          image: {{ $V.jrtc_controller.image }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: hugepage
              mountPath: /dev/hugepages
            - name: sys
              mountPath: /sys/
            - name: dev
              mountPath: /dev
            - name: jrtc-config
              mountPath: /jrtc-config
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
            {{- if $V.jbpf.codelets_vol_mount }}
            - name: codelets
              mountPath: /codelets
            {{- end }}
          {{- if $V.debug_mode.enabled }}
          command: ["/bin/sh","-c"]
          args: ["sleep 99999999d"]
          {{- else }}
          command: ["/jrtc/out/bin/jrtc"]
          args: ["--config=/jrtc-config/config"]
          {{- end }}
          securityContext:
            privileged: true
          env:
            - name: HOSTNAME
              value: {{ ($V.HOSTNAME | default "") | quote }}
            - name: JRTC_PATH
              value: "/jrtc"
            - name: JRTC_APP_PATH
              value: "/jrtc/out/lib/"
            - name: LD_LIBRARY_PATH
              value: "$LD_LIBRARY_PATH:/jrtc/out/lib/"
            {{- if $V.jrtc_controller.log_analytics.enabled }}
            - name: LA_WORKSPACE_ID
              value: {{ $V.jrtc_controller.log_analytics.workspace_id | quote }}
            - name: LA_PRIMARY_KEY
              value: {{ $V.jrtc_controller.log_analytics.primary_key | quote }}
            {{- end }}
            {{- if $V.udp_forwarder.enabled }}
            - name: JRTC_JSON_INPUT_PORT
              value: {{ $baseUDP | quote }}
            {{- end }}

        {{- if $V.jrtc_controller.local_decoder.enabled }}
        - name: jrtc-decoder
          image: {{ $V.jrtc_controller.image }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          {{- if $V.debug_mode.enabled }}
          command: ["/bin/sh","-c"]
          args: ["sleep 99999999d"]
          {{- else }}
          command: ["/jrtc/out/bin/jrtc-ctl"]
          args:
            {{- if $V.jrtc_controller.local_decoder.log_analytics.enabled }}
            - "decoder"
            - "run"
            - "--decoder-data-enabled"
            - "--log-level"
            - "debug"
            - "--json-data-enabled"
            - "--loganalytics-enabled"
            {{- else }}
            - "decoder"
            - "run"
            - "--decoder-data-enabled"
            - "--log-level"
            - "debug"
            - "--json-data-enabled"
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: hugepage
              mountPath: /dev/hugepages
            - name: sys
              mountPath: /sys/
            - name: dev
              mountPath: /dev
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
        {{- end }}

{{- else }}

#############################
# Split mode: CU and DU pods
#############################

# ---------- CU ----------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: srs-cu-{{ $ran_name }}
  namespace: {{ $R.Namespace }}
  labels:
    app: srs-cu-{{ $ran_name }}
spec:
  serviceName: srs-cu-{{ $ran_name }}
  selector:
    matchLabels:
      app: srs-cu-{{ $ran_name }}
  template:
    metadata:
      labels:
        app: srs-cu-{{ $ran_name }}
      {{- if $V.sriov.enabled }}
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            { "name": "srs-sriov-cu" }
          ]
      {{- end }}
    spec:
      serviceAccountName: srs-service-account
      automountServiceAccountToken: true
      nodeSelector:
        {{- include "selectNode" (dict "vals" $V "role" "cu") | nindent 8 }}
      terminationGracePeriodSeconds: 0
      {{- if $V.image.pullSecret }}
      imagePullSecrets:
        - name: {{ $V.image.pullSecret }}
      {{- end }}
      volumes:
        - name: dshm
          hostPath: { path: /dev/shm }
        - name: hugepage
          hostPath: { path: /dev/hugepages }
        - name: sys
          hostPath: { path: /sys }
        - name: dev
          hostPath: { path: /dev }
        - name: varjbpf
          hostPath:
            path: "{{ $jbpfPath }}/{{ $jbpfNS }}"
        {{- if $V.jbpf.codelets_vol_mount }}
        - name: codelets
          hostPath:
            path: {{ $V.jbpf.codelets_vol_mount | quote }}
        {{- end }}
        - name: du-config-volume
          configMap:
            name: srs-gnb-cm-{{ $ran_name }}
        - name: jrtc-config
          configMap:
            name: jrtc-config
      containers:
        {{- if $V.troubleshooter.enabled }}
        - name: troubleshooter
          image: {{ $V.troubleshooter.image }}
          command: ["/bin/sh","-c","--"]
          args: ["while true; do sleep 30; done;"]
        {{- end }}

        {{- if $V.udp_forwarder.enabled }}
        - name: udpforwarder
          image: {{ $V.image.srs_jbpf }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          env:
            {{- if $V.sriov.enabled }}
            - name: LISTEN_IP
              value: {{ $V.sriov.cucp_ip | quote }}
            {{- else }}
            - name: LISTEN_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- end }}
            - name: LISTEN_PORT
              value: {{ (add $baseUDP $ran_cnt) | quote }}
            - name: FORWARD_IP
              value: "jrtc-udp-input-cu-{{ $ran_name }}.{{ $.Release.Namespace }}.svc.cluster.local"
            - name: FORWARD_PORT
              value: {{ $baseUDP | quote }}
          command: ["/bin/sh","-c"]
          args: [{{ if $V.debug_mode.enabled }}"sleep 99999999d"{{ else }}"/udp_forwarder/udp_forwarder.sh"{{ end }}]
        {{- end }}

        # Role container: CU (same definition as DU except ROLE and RU resources)
        - name: cu
          image: {{ $V.image.srs_jbpf }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: hugepage
              mountPath: /dev/hugepages
            - name: sys
              mountPath: /sys/
            - name: dev
              mountPath: /dev/
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
            {{- if $V.jbpf.codelets_vol_mount }}
            - name: codelets
              mountPath: /codelets
            {{- end }}
            - name: du-config-volume
              mountPath: /du-config
              readOnly: true
          command: ["/bin/sh","-c"]
          args: [{{ if $V.debug_mode.enabled }}"sleep 99999999d"{{ else }}"/opt/Scripts/run.sh"{{ end }}]
          env:
            - name: ROLE
              value: "CU"
            - name: DEBUG_MODE
              value: {{ $V.debug_mode.enabled | quote }}
            - name: JBPF_CODELETS
              value: "/codelets"
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: {{ $V.resources.gnb.limits.cpu }}
              memory: {{ $V.resources.gnb.limits.memory }}
              hugepages-1Gi: {{ $V.resources.gnb.limits.hugepages1Gi }}
            requests:
              cpu: {{ $V.resources.gnb.requests.cpu }}
              memory: {{ $V.resources.gnb.requests.memory }}
              hugepages-1Gi: {{ $V.resources.gnb.requests.hugepages1Gi }}

        - name: srs-gnb-proxy
          image: {{ $V.image.srs_jbpf_proxy }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          {{- if $V.debug_mode.enabled }}
          command: ["/bin/sh","-c"]
          args: ["sleep 99999999d"]
          {{- else }}
          command: ["/src/out/bin/srsran_reverse_proxy"]
          args:
            - "--host-port"
            - "{{ add $baseProxy $ran_cnt }}"
            - "--address"
            - "{{ printf "%s/%s/%s" $jbpfPath $jbpfNS $lcmName }}"
          {{- end }}
          volumeMounts:
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
            {{- if $V.jbpf.codelets_vol_mount }}
            - name: codelets
              mountPath: /codelets
            {{- end }}
          env:
            - name: JBPF_CODELETS
              value: "/codelets"
          resources:
            limits:
              {{- toYaml $V.resources.jbpf_proxy.limits | nindent 14 }}
            requests:
              {{- toYaml $V.resources.jbpf_proxy.requests | nindent 14 }}

        - name: jrtc
          image: {{ $V.jrtc_controller.image }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: hugepage
              mountPath: /dev/hugepages
            - name: sys
              mountPath: /sys/
            - name: dev
              mountPath: /dev
            - name: jrtc-config
              mountPath: /jrtc-config
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
            {{- if $V.jbpf.codelets_vol_mount }}
            - name: codelets
              mountPath: /codelets
            {{- end }}
          {{- if $V.debug_mode.enabled }}
          command: ["/bin/sh","-c"]
          args: ["sleep 99999999d"]
          {{- else }}
          command: ["/jrtc/out/bin/jrtc"]
          args: ["--config=/jrtc-config/config"]
          {{- end }}
          securityContext:
            privileged: true
          env:
            - name: HOSTNAME
              value: {{ ($V.HOSTNAME | default "") | quote }}
            - name: JRTC_PATH
              value: "/jrtc"
            - name: JRTC_APP_PATH
              value: "/jrtc/out/lib/"
            - name: LD_LIBRARY_PATH
              value: "$LD_LIBRARY_PATH:/jrtc/out/lib/"
            {{- if $V.jrtc_controller.log_analytics.enabled }}
            - name: LA_WORKSPACE_ID
              value: {{ $V.jrtc_controller.log_analytics.workspace_id | quote }}
            - name: LA_PRIMARY_KEY
              value: {{ $V.jrtc_controller.log_analytics.primary_key | quote }}
            {{- end }}
            {{- if $V.udp_forwarder.enabled }}
            - name: JRTC_JSON_INPUT_PORT
              value: {{ $baseUDP | quote }}
            {{- end }}

        {{- if $V.jrtc_controller.local_decoder.enabled }}
        - name: jrtc-decoder
          image: {{ $V.jrtc_controller.image }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          {{- if $V.debug_mode.enabled }}
          command: ["/bin/sh","-c"]
          args: ["sleep 99999999d"]
          {{- else }}
          command: ["/jrtc/out/bin/jrtc-ctl"]
          args:
            {{- if $V.jrtc_controller.local_decoder.log_analytics.enabled }}
            - "decoder"
            - "run"
            - "--decoder-data-enabled"
            - "--log-level"
            - "debug"
            - "--json-data-enabled"
            - "--loganalytics-enabled"
            {{- else }}
            - "decoder"
            - "run"
            - "--decoder-data-enabled"
            - "--log-level"
            - "debug"
            - "--json-data-enabled"
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: hugepage
              mountPath: /dev/hugepages
            - name: sys
              mountPath: /sys/
            - name: dev
              mountPath: /dev
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
        {{- end }}

---
# ---------- DU ----------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: srs-du-{{ $ran_name }}
  namespace: {{ $R.Namespace }}
  labels:
    app: srs-du-{{ $ran_name }}
spec:
  serviceName: srs-du-{{ $ran_name }}
  selector:
    matchLabels:
      app: srs-du-{{ $ran_name }}
  template:
    metadata:
      labels:
        app: srs-du-{{ $ran_name }}
      {{- if $V.sriov.enabled }}
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {{- $first := true -}}
            {{- range $idx_c, $cell := $du.cells -}}
            {{- if not $first }},{{- end }}
            { "name": "srs-{{ $ran_name }}-sriov-fh-instance-{{ $idx_c }}" }
            {{- $first = false -}}
            {{- end -}}
          ]
      {{- end }}
    spec:
      serviceAccountName: srs-service-account
      automountServiceAccountToken: true
      nodeSelector:
        {{- include "selectNode" (dict "vals" $V "role" "du") | nindent 8 }}
      terminationGracePeriodSeconds: 0
      {{- if $V.image.pullSecret }}
      imagePullSecrets:
        - name: {{ $V.image.pullSecret }}
      {{- end }}
      volumes:
        - name: dshm
          hostPath: { path: /dev/shm }
        - name: hugepage
          hostPath: { path: /dev/hugepages }
        - name: sys
          hostPath: { path: /sys }
        - name: dev
          hostPath: { path: /dev }
        - name: varjbpf
          hostPath:
            path: "{{ $jbpfPath }}/{{ $jbpfNS }}"
        {{- if $V.jbpf.codelets_vol_mount }}
        - name: codelets
          hostPath:
            path: {{ $V.jbpf.codelets_vol_mount | quote }}
        {{- end }}
        - name: du-config-volume
          configMap:
            name: srs-gnb-cm-{{ $ran_name }}
        - name: jrtc-config
          configMap:
            name: jrtc-config
      containers:
        {{- if $V.troubleshooter.enabled }}
        - name: troubleshooter
          image: {{ $V.troubleshooter.image }}
          command: ["/bin/sh","-c","--"]
          args: ["while true; do sleep 30; done;"]
        {{- end }}

        {{- if $V.udp_forwarder.enabled }}
        - name: udpforwarder
          image: {{ $V.image.srs_jbpf }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          env:
            - name: LISTEN_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: LISTEN_PORT
              value: {{ (add $baseUDP $ran_cnt) | quote }}
            - name: FORWARD_IP
              value: "jrtc-udp-input-du-{{ $ran_name }}.{{ $.Release.Namespace }}.svc.cluster.local"
            - name: FORWARD_PORT
              value: {{ $baseUDP | quote }}
          command: ["/bin/sh","-c"]
          args: [{{ if $V.debug_mode.enabled }}"sleep 99999999d"{{ else }}"/udp_forwarder/udp_forwarder.sh"{{ end }}]
        {{- end }}

        # Role container: DU (requests RU resources if SR-IOV is enabled)
        - name: du
          image: {{ $V.image.srs_jbpf }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: hugepage
              mountPath: /dev/hugepages
            - name: sys
              mountPath: /sys/
            - name: dev
              mountPath: /dev/
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
            {{- if $V.jbpf.codelets_vol_mount }}
            - name: codelets
              mountPath: /codelets
            {{- end }}
            - name: du-config-volume
              mountPath: /du-config
              readOnly: true
          command: ["/bin/sh","-c"]
          args: [{{ if $V.debug_mode.enabled }}"sleep 99999999d"{{ else }}"/opt/Scripts/run.sh"{{ end }}]
          env:
            - name: ROLE
              value: "DU"
            - name: DEBUG_MODE
              value: {{ $V.debug_mode.enabled | quote }}
            - name: JBPF_CODELETS
              value: "/codelets"
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: {{ $V.resources.gnb.limits.cpu }}
              memory: {{ $V.resources.gnb.limits.memory }}
              hugepages-1Gi: {{ $V.resources.gnb.limits.hugepages1Gi }}
              {{- if $V.sriov.enabled }}
              {{- range $cell := $du.cells }}
              {{ $cell.ruDPDKResource }}: 1
              {{- end }}
              {{- end }}
            requests:
              cpu: {{ $V.resources.gnb.requests.cpu }}
              memory: {{ $V.resources.gnb.requests.memory }}
              hugepages-1Gi: {{ $V.resources.gnb.requests.hugepages1Gi }}
              {{- if $V.sriov.enabled }}
              {{- range $cell := $du.cells }}
              {{ $cell.ruDPDKResource }}: 1
              {{- end }}
              {{- end }}

        - name: srs-gnb-proxy
          image: {{ $V.image.srs_jbpf_proxy }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          {{- if $V.debug_mode.enabled }}
          command: ["/bin/sh","-c"]
          args: ["sleep 99999999d"]
          {{- else }}
          command: ["/src/out/bin/srsran_reverse_proxy"]
          args:
            - "--host-port"
            - "{{ add $baseProxy $ran_cnt }}"
            - "--address"
            - "{{ printf "%s/%s/%s" $jbpfPath $jbpfNS $lcmName }}"
          {{- end }}
          volumeMounts:
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
            {{- if $V.jbpf.codelets_vol_mount }}
            - name: codelets
              mountPath: /codelets
            {{- end }}
          env:
            - name: JBPF_CODELETS
              value: "/codelets"
          resources:
            limits:
              {{- toYaml $V.resources.jbpf_proxy.limits | nindent 14 }}
            requests:
              {{- toYaml $V.resources.jbpf_proxy.requests | nindent 14 }}

        - name: jrtc
          image: {{ $V.jrtc_controller.image }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: hugepage
              mountPath: /dev/hugepages
            - name: sys
              mountPath: /sys/
            - name: dev
              mountPath: /dev
            - name: jrtc-config
              mountPath: /jrtc-config
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
            {{- if $V.jbpf.codelets_vol_mount }}
            - name: codelets
              mountPath: /codelets
            {{- end }}
          {{- if $V.debug_mode.enabled }}
          command: ["/bin/sh","-c"]
          args: ["sleep 99999999d"]
          {{- else }}
          command: ["/jrtc/out/bin/jrtc"]
          args: ["--config=/jrtc-config/config"]
          {{- end }}
          securityContext:
            privileged: true
          env:
            - name: HOSTNAME
              value: {{ ($V.HOSTNAME | default "") | quote }}
            - name: JRTC_PATH
              value: "/jrtc"
            - name: JRTC_APP_PATH
              value: "/jrtc/out/lib/"
            - name: LD_LIBRARY_PATH
              value: "$LD_LIBRARY_PATH:/jrtc/out/lib/"
            {{- if $V.jrtc_controller.log_analytics.enabled }}
            - name: LA_WORKSPACE_ID
              value: {{ $V.jrtc_controller.log_analytics.workspace_id | quote }}
            - name: LA_PRIMARY_KEY
              value: {{ $V.jrtc_controller.log_analytics.primary_key | quote }}
            {{- end }}
            {{- if $V.udp_forwarder.enabled }}
            - name: JRTC_JSON_INPUT_PORT
              value: {{ $baseUDP | quote }}
            {{- end }}

        {{- if $V.jrtc_controller.local_decoder.enabled }}
        - name: jrtc-decoder
          image: {{ $V.jrtc_controller.image }}
          imagePullPolicy: {{ $V.image.pullPolicy }}
          {{- if $V.debug_mode.enabled }}
          command: ["/bin/sh","-c"]
          args: ["sleep 99999999d"]
          {{- else }}
          command: ["/jrtc/out/bin/jrtc-ctl"]
          args:
            {{- if $V.jrtc_controller.local_decoder.log_analytics.enabled }}
            - "decoder"
            - "run"
            - "--decoder-data-enabled"
            - "--log-level"
            - "debug"
            - "--json-data-enabled"
            - "--loganalytics-enabled"
            {{- else }}
            - "decoder"
            - "run"
            - "--decoder-data-enabled"
            - "--log-level"
            - "debug"
            - "--json-data-enabled"
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: hugepage
              mountPath: /dev/hugepages
            - name: sys
              mountPath: /sys/
            - name: dev
              mountPath: /dev
            - name: varjbpf
              mountPath: "{{ $jbpfPath }}/{{ $jbpfNS }}"
        {{- end }}

{{- end }}  {{/* end split vs monolithic */}}

{{- $ran_cnt = add1 $ran_cnt -}}
{{- end }}
