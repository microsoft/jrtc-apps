{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "900f78c5-8e1e-4bed-917a-abe980b97443",
            "version": "KqlParameterItem/1.0",
            "name": "timeparameter",
            "label": "Select time",
            "type": 4,
            "isRequired": true,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "value": {
              "durationMs": 900000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "9f8e4b1e-4b32-4262-b177-34f40b628d63",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "preText": "Traffic Info",
            "style": "link"
          },
          {
            "id": "0a7d87fc-e4da-46f3-96af-8162895459ed",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Details",
            "subTarget": "Details",
            "style": "link"
          }
        ]
      },
      "name": "links - 6"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "b640808b-59be-4059-b388-7fac0def59a8",
                  "version": "KqlParameterItem/1.0",
                  "name": "ShowThresholds",
                  "label": "Show Thresholds",
                  "type": 2,
                  "query": "datatable(Toggle:string)\r\n[\r\n    \"True\",\r\n    \"False\"\r\n]\r\n",
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "value": "False"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "name": "parameters - 9"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e7960049-67ea-4462-9a0b-bdf7388862ea",
                  "version": "KqlParameterItem/1.0",
                  "name": "PhyUlSinrThreshold",
                  "label": "PHY-UL-SINR (dB)",
                  "type": 1,
                  "description": "UL-SINR (dB)",
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "22"
                },
                {
                  "id": "360e4e42-5470-44bf-b906-2e5c45228dfa",
                  "version": "KqlParameterItem/1.0",
                  "name": "PhyUlRsrpThreshold",
                  "label": "PHY-UL-RSRP (dBm)",
                  "type": 1,
                  "description": "UL-RSRP (dBm)",
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "-30"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "100",
            "conditionalVisibility": {
              "parameterName": "ShowThresholds",
              "comparison": "isEqualTo",
              "value": "True"
            },
            "name": "PHY thresholds"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e7960049-67ea-4462-9a0b-bdf7388862ea",
                  "version": "KqlParameterItem/1.0",
                  "name": "MacHarqThreshold",
                  "label": "MAC-HARQ-Failure (%)",
                  "type": 1,
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "35"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "100",
            "conditionalVisibility": {
              "parameterName": "ShowThresholds",
              "comparison": "isEqualTo",
              "value": "True"
            },
            "name": "PHY thresholds"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e7960049-67ea-4462-9a0b-bdf7388862ea",
                  "version": "KqlParameterItem/1.0",
                  "name": "RlcDlSduTransmissionThreshold",
                  "label": "RLC-DL-SDU-Tx-Latency (ms)",
                  "type": 1,
                  "description": "DL-SDU-Tx-Latency (ms)",
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "5.0"
                },
                {
                  "id": "c065c94c-1bd5-42fc-92c7-fd8d8935b976",
                  "version": "KqlParameterItem/1.0",
                  "name": "RlcDlSduDeliveryThreshold",
                  "label": "RLC-DL-SDU-Delivery-Latency (ms)",
                  "type": 1,
                  "description": "DL-SDU-Delivery-Latency (ms)",
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "70.0"
                },
                {
                  "id": "360e4e42-5470-44bf-b906-2e5c45228dfa",
                  "version": "KqlParameterItem/1.0",
                  "name": "RlcUlSduDeliveryThreshold",
                  "label": "RLC-UL-SDU-Delivery-Latency (ms)",
                  "type": 1,
                  "description": "UL-SDU-Delivery-Latency (ms)",
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "5.0"
                },
                {
                  "id": "d380a58c-a4ea-4b90-981f-02045997cd1a",
                  "version": "KqlParameterItem/1.0",
                  "name": "RlcDlSduQueueBytesThreshold",
                  "label": "RLC-DL-SDU-Queue (bytes)",
                  "type": 1,
                  "description": "DL-SDU-Queue (bytes)",
                  "value": "6000000"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "100",
            "conditionalVisibility": {
              "parameterName": "ShowThresholds",
              "comparison": "isEqualTo",
              "value": "True"
            },
            "name": "PHY thresholds"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e7960049-67ea-4462-9a0b-bdf7388862ea",
                  "version": "KqlParameterItem/1.0",
                  "name": "PdcpDlSduTransmissionThreshold",
                  "label": "PDCP-DL-SDU-Tx-Latency (ms)",
                  "type": 1,
                  "description": "DL-SDU-Tx-Latency (ms)",
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "200"
                },
                {
                  "id": "c065c94c-1bd5-42fc-92c7-fd8d8935b976",
                  "version": "KqlParameterItem/1.0",
                  "name": "PdcpDlSduDiscardedThreshold",
                  "label": "PDCP-DL-SDUs-Discarded",
                  "type": 1,
                  "description": "DL-SDUs-Discarded",
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "1"
                },
                {
                  "id": "360e4e42-5470-44bf-b906-2e5c45228dfa",
                  "version": "KqlParameterItem/1.0",
                  "name": "PdcpDlPduWindowPktsThreshold",
                  "label": "PDCP-DL-PDU-WindowPkts",
                  "type": 1,
                  "description": "DL-PDU-WindowPkts",
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "2000"
                },
                {
                  "id": "7eabb464-2a8b-43fb-b34a-448b01473c74",
                  "version": "KqlParameterItem/1.0",
                  "name": "PdcpUlPduWindowPktsThreshold",
                  "label": "PDCP-UL-PDU-WindowPkts",
                  "type": 1,
                  "description": "UL-PDU-WindowPkts",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "1000"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "100",
            "conditionalVisibility": {
              "parameterName": "ShowThresholds",
              "comparison": "isEqualTo",
              "value": "True"
            },
            "name": "PHY thresholds"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e7960049-67ea-4462-9a0b-bdf7388862ea",
                  "version": "KqlParameterItem/1.0",
                  "name": "TrafficDlThreshold",
                  "label": "Traffic-DL (Bytes)",
                  "type": 1,
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "1"
                },
                {
                  "id": "c065c94c-1bd5-42fc-92c7-fd8d8935b976",
                  "version": "KqlParameterItem/1.0",
                  "name": "TrafficUlThreshold",
                  "label": "Traffic-UL (Bytes)",
                  "type": 1,
                  "isRequired": true,
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "1"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "100",
            "conditionalVisibility": {
              "parameterName": "ShowThresholds",
              "comparison": "isEqualTo",
              "value": "True"
            },
            "name": "PHY thresholds"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "bc95e3bf-cb05-42df-b068-b7f3520febb2",
                  "cellValue": "selectedUEStatusTab",
                  "linkTarget": "parameter",
                  "linkLabel": "UE Summary",
                  "subTarget": "UESummary",
                  "preText": "Overview",
                  "style": "link"
                },
                {
                  "id": "0de3723d-56a2-4f7c-873e-6a575fe7a5dd",
                  "cellValue": "selectedUEStatusTab",
                  "linkTarget": "parameter",
                  "linkLabel": "perUE",
                  "subTarget": "perUE",
                  "style": "link"
                }
              ]
            },
            "name": "links - 5 - Copy"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "UeSummaryGroup",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\n\r\nlet phy_ul_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| extend \r\n    avgSinr = todouble(stats_d.avg_sinr),\r\n    avgRsrp = todouble(stats_d.avg_rsrp)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| summarize ulSinr_avg=avg(avgSinr), ulRsrp_avg=avg(avgRsrp) by imsi\r\n;\r\n\r\nlet mac_dl_harq_failures = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_DL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend \r\n    txCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts),\r\n    reTxCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend failureRate = iif(txCount + reTxCount == 0, 0.0, reTxCount  * 100.0 / (txCount + reTxCount))\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| summarize \r\n    dlHarq_avgF=avg(failureRate) by imsi\r\n;\r\n\r\nlet mac_ul_harq_failures = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend \r\n    txCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts),\r\n    reTxCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend failureRate = iif(txCount + reTxCount == 0, 0.0, reTxCount  * 100.0 / (txCount + reTxCount))\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| summarize \r\n    ulHarq_avgF=avg(failureRate) by imsi\r\n;\r\n\r\nlet rlc_dl_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduTxDelay = todouble(stats_d.sdu_tx_completed.avg) / 1000000,\r\n  numSduTx = toint(stats_d.sdu_tx_completed.count),\r\n  avgSduDeliveryDelay = todouble(stats_d.sdu_tx_delivered.avg) / 1000000,\r\n  avgSduQueueBytes = todouble(stats_d.sdu_queue_bytes.avg),\r\n  pduTxBytes = todouble(stats_d.pdu_tx_bytes.total)\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| summarize \r\n    rlc_dl_SduTxLatency_avg=avg(avgSduTxDelay), \r\n    rlc_dl_SduDeliveryLatency_avg=avg(avgSduDeliveryDelay), \r\n    rlc_dl_SduQueueBytes_avg=avg(avgSduQueueBytes) by imsi\r\n;\r\n\r\nlet rlc_ul_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduDeliveryDelay = todouble(stats_d.sdu_delivered_latency.avg) / 1000000,\r\n  avgSduQueueBytes = todouble(stats_d.sdu_queue_bytes.avg)\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| summarize rlc_ul_SduDeliveryLatency_avg=avg(avgSduDeliveryDelay) by imsi\r\n;\r\n\r\nlet pdcp_dl_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  sduDiscarded = todouble(stats_d.sdu_discarded),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg),\r\n  sduTxLatency_avg = todouble(stats_d.sdu_tx_latency.avg) / 1e6\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| summarize \r\n    pdcp_dl_sduDiscarded_avg=avg(sduDiscarded),\r\n    pdcp_dl_pduWindowPkts_avg=avg(pduWindowPkts_avg),\r\n    pdcp_dl_sduTxLatency_avg=avg(sduTxLatency_avg) by imsi\r\n;\r\n\r\nlet pdcp_ul_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg)  \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| summarize \r\n    pdcp_ul_pduWindowPkts_avg=avg(pduWindowPkts_avg) by imsi\r\n;\r\n\r\n\r\nlet rlc_dl_traffic_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  numSduTx = toint(stats_d.sdu_tx_completed.count)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\\r\\n\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| summarize \r\n    rlc_dl_SduTxCount=sum(numSduTx) by imsi\r\n;\r\n\r\nlet pdcp_dl_traffic_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  newSdus = toint(stats_d.sdu_new_bytes.count)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\\r\\n\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| summarize \r\n    pdcp_dl_newSdus=sum(newSdus) by imsi\r\n;\r\n\r\nlet pdcp_ul_traffic_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg),\r\n  sduDeliveredBytes = todouble(stats_d.sdu_delivered_bytes.total)  \r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\\r\\n\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| summarize \r\n    pdcp_ul_sduDeliveredBytes=sum(sduDeliveredBytes) by imsi\r\n;\r\n\r\n// Collate all results\r\nlet summary = phy_ul_stats\r\n| join kind=fullouter  mac_dl_harq_failures on imsi\r\n| join kind=fullouter  mac_ul_harq_failures on imsi\r\n| join kind=fullouter  rlc_dl_stats on imsi\r\n| join kind=fullouter  rlc_ul_stats on imsi\r\n| join kind=fullouter  pdcp_dl_stats on imsi\r\n| join kind=fullouter  pdcp_ul_stats on imsi\r\n| join kind=fullouter  rlc_dl_traffic_stats on imsi\r\n| join kind=fullouter  pdcp_dl_traffic_stats on imsi\r\n| join kind=fullouter  pdcp_ul_traffic_stats on imsi\r\n;\r\n\r\nlet good=2;\r\nlet empty=1;\r\nlet bad=0;\r\n\r\nlet good_emoji = \"✅\";\r\nlet empty_emoji = \"⚪\";\r\nlet bad_emoji = \"❌\";\r\n\r\nlet result = summary\r\n| where isnotempty(imsi)\r\n| extend ulSinrResult = case(\r\n    isnull(ulSinr_avg) or isnan(ulSinr_avg), empty,\r\n    ulSinr_avg > {PhyUlSinrThreshold}, good,\r\n    bad\r\n)\r\n| extend ulRsrpResult = case(\r\n    isnull(ulRsrp_avg) or isnan(ulRsrp_avg), empty,\r\n    ulRsrp_avg > {PhyUlRsrpThreshold}, good,\r\n    bad\r\n)\r\n| extend PhyResult = case(\r\n    (ulSinrResult == bad or ulRsrpResult == bad), bad,\r\n    (ulSinrResult == empty or ulRsrpResult == empty), empty,\r\n    good\r\n    )\r\n| extend dlHarqResult = case(\r\n    isnull(dlHarq_avgF) or isnan(dlHarq_avgF), empty,\r\n    dlHarq_avgF < {MacHarqThreshold}, good,\r\n    bad\r\n)\r\n| extend ulHarqResult = case(\r\n    isnull(ulHarq_avgF) or isnan(ulHarq_avgF), empty,\r\n    ulHarq_avgF < {MacHarqThreshold}, good,\r\n    bad\r\n)\r\n| extend MacDlResult = case(\r\n    (dlHarqResult == bad), bad,\r\n    (dlHarqResult == empty), empty,\r\n    good\r\n    )\r\n| extend MacUlResult = case(\r\n    (ulHarqResult == bad), bad,\r\n    (ulHarqResult == empty), empty,\r\n    good\r\n    )\r\n| extend MacResult = min_of(MacDlResult, MacUlResult)\r\n| extend RlcDlSduTxLatencyResult = case(\r\n    isnull(rlc_dl_SduTxLatency_avg) or isnan(rlc_dl_SduTxLatency_avg), empty,\r\n    rlc_dl_SduTxLatency_avg < {RlcDlSduTransmissionThreshold}, good,\r\n    bad\r\n)\r\n| extend RlcDlSduDeliveryLatencyResult = case(\r\n    isnull(rlc_dl_SduDeliveryLatency_avg) or isnan(rlc_dl_SduDeliveryLatency_avg), empty,\r\n    rlc_dl_SduDeliveryLatency_avg < {RlcDlSduDeliveryThreshold}, good,\r\n    bad\r\n)\r\n| extend RlcDlSduQueueBytesResult = case(\r\n    isnull(rlc_dl_SduQueueBytes_avg) or isnan(rlc_dl_SduQueueBytes_avg), empty,\r\n    rlc_dl_SduQueueBytes_avg < {RlcDlSduQueueBytesThreshold}, good,\r\n    bad\r\n)\r\n| extend RlcUlSduDeliveryLatencyResult = case(\r\n    isnull(rlc_ul_SduDeliveryLatency_avg) or isnan(rlc_ul_SduDeliveryLatency_avg), empty,\r\n    rlc_ul_SduDeliveryLatency_avg < {RlcUlSduDeliveryThreshold}, good,\r\n    bad\r\n)\r\n| extend RlcDlResult = case(\r\n    (RlcDlSduTxLatencyResult == bad or RlcDlSduDeliveryLatencyResult == bad or RlcDlSduQueueBytesResult == bad), bad,\r\n    (RlcDlSduTxLatencyResult == empty or RlcDlSduDeliveryLatencyResult == empty or RlcDlSduQueueBytesResult == empty), empty,\r\n    good\r\n    )\r\n| extend RlcUlResult = case(\r\n    (RlcUlSduDeliveryLatencyResult == bad), bad,\r\n    (RlcUlSduDeliveryLatencyResult == empty), empty,\r\n    good\r\n    )\r\n| extend RlcResult = min_of(RlcDlResult, RlcUlResult)\r\n| extend PdcpDlSduTxLatencyResult = case(\r\n    isnull(pdcp_dl_sduTxLatency_avg) or isnan(pdcp_dl_sduTxLatency_avg), empty,\r\n    pdcp_dl_sduTxLatency_avg < {PdcpDlSduTransmissionThreshold}, good,\r\n    bad\r\n)\r\n| extend PdcpDlSduDiscardedResult = case(\r\n    isnull(pdcp_dl_sduDiscarded_avg) or isnan(pdcp_dl_sduDiscarded_avg), good,\r\n    pdcp_dl_sduDiscarded_avg < {PdcpDlSduDiscardedThreshold}, good,\r\n    bad\r\n)\r\n| extend PdcpDlPduWindowPktsResult = case(\r\n    isnull(pdcp_dl_pduWindowPkts_avg) or isnan(pdcp_dl_pduWindowPkts_avg), empty,\r\n    pdcp_dl_pduWindowPkts_avg < {PdcpDlPduWindowPktsThreshold}, good,\r\n    bad\r\n)\r\n| extend PdcpUlPduWindowPktsResult = case(\r\n    isnull(pdcp_ul_pduWindowPkts_avg) or isnan(pdcp_ul_pduWindowPkts_avg), empty,\r\n    pdcp_ul_pduWindowPkts_avg < {PdcpUlPduWindowPktsThreshold}, good,\r\n    bad\r\n)\r\n| extend PdcpDlResult = case(\r\n    (PdcpDlSduTxLatencyResult == bad or PdcpDlSduDiscardedResult == bad or PdcpDlPduWindowPktsResult == bad), bad,\r\n    (PdcpDlSduTxLatencyResult == empty or PdcpDlSduDiscardedResult == empty or PdcpDlPduWindowPktsResult == empty), empty,\r\n    good\r\n)\r\n| extend PdcpUlResult = case(\r\n    (PdcpUlPduWindowPktsResult == bad), bad,\r\n    (PdcpUlPduWindowPktsResult == empty), empty,\r\n    good\r\n)\r\n| extend PdcpResult = min_of(PdcpDlResult, PdcpUlResult)\r\n\r\n| extend TrafficDlResult = case(\r\n    isnull(pdcp_dl_newSdus), bad,\r\n    isnull(rlc_dl_SduTxCount), bad,\r\n    pdcp_dl_newSdus < {TrafficDlThreshold}, bad,\r\n    rlc_dl_SduTxCount < {TrafficDlThreshold}, bad,\r\n    // check that the pdcp_dl_newSdus and rlc_dl_SduTxCount aew within 10% of each other\r\n    abs(pdcp_dl_newSdus - rlc_dl_SduTxCount) <= 0.1 * iif(pdcp_dl_newSdus > rlc_dl_SduTxCount, pdcp_dl_newSdus, rlc_dl_SduTxCount), good,\r\n    bad\r\n)\r\n| extend TrafficUlResult = case(\r\n    isnull(pdcp_ul_sduDeliveredBytes) or isnan(pdcp_ul_sduDeliveredBytes), bad,\r\n    pdcp_ul_sduDeliveredBytes < {TrafficUlThreshold}, bad,\r\n    good\r\n)\r\n\r\n| extend TrafficResult = case(\r\n    TrafficUlResult == bad or TrafficUlResult == bad, bad,\r\n    TrafficUlResult == bad or TrafficUlResult == empty, empty,\r\n    good\r\n    )\r\n\r\n| extend RANResult = case(\r\n    PhyResult == bad or\r\n      MacResult == bad or\r\n      RlcResult == bad or\r\n      PdcpResult == bad, bad,\r\n    PhyResult == empty or\r\n      MacResult == empty or\r\n      RlcResult == empty or\r\n      PdcpResult == empty, empty,\r\n    good\r\n    )\r\n\r\n| extend RAN = case(\r\n    RANResult == empty, empty_emoji,\r\n    RANResult == good, good_emoji,\r\n    RANResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n\r\n| extend Traffic = case(\r\n    TrafficResult == empty, empty_emoji,\r\n    TrafficResult == good, good_emoji,\r\n    TrafficResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n\r\n// collate all results to form overall Status for the UE\r\n| extend Status = case(\r\n    RANResult == bad or TrafficResult == bad, bad_emoji,\r\n    good_emoji\r\n    )\r\n\r\n| project imsi, Status, RAN, Traffic\r\n| order by imsi asc\r\n;\r\n\r\nresult\r\n",
                          "size": 0,
                          "aggregation": 3,
                          "timeContextFromParameter": "timeparameter",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "imsi",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "26%"
                                }
                              },
                              {
                                "columnMatch": "Status",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "26%"
                                }
                              },
                              {
                                "columnMatch": "PHY",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "MAC",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "RLC",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "PDCP",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "TrafficDL",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "TrafficUL",
                                "formatter": 1
                              }
                            ]
                          },
                          "sortBy": []
                        },
                        "customWidth": "100",
                        "name": "query - 0"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedUEStatusTab",
                    "comparison": "isEqualTo",
                    "value": "UESummary"
                  },
                  "name": "UeSummaryGroup"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "perUeGroup",
                    "items": [
                      {
                        "type": 9,
                        "content": {
                          "version": "KqlParameterItem/1.0",
                          "parameters": [
                            {
                              "id": "3baf1b04-7472-4820-a82e-4c7d29d20405",
                              "version": "KqlParameterItem/1.0",
                              "name": "IMSI",
                              "type": 2,
                              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\n\r\nlet phy_ul_sinr = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project imsi\r\n| distinct imsi\r\n;\r\n\r\nlet phy_ul_rsrp = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project imsi\r\n| distinct imsi\r\n;\r\n\r\nlet mac_dl_harq_failures = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_DL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project imsi\r\n| distinct imsi\r\n;\r\n\r\nlet mac_ul_harq_failures = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project imsi\r\n| distinct imsi\r\n;\r\n\r\nlet rlc_dl_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project imsi\r\n| distinct imsi\r\n;\r\n\r\nlet rlc_ul_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project imsi\r\n| distinct imsi\r\n;\r\n\r\nlet pdcp_dl_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project imsi\r\n| distinct imsi\r\n;\r\n\r\nlet pdcp_ul_stats = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project imsi\r\n| distinct imsi\r\n;\r\n\r\n// Collate all results\r\nunion phy_ul_rsrp, phy_ul_sinr,\r\n      mac_dl_harq_failures, mac_ul_harq_failures,\r\n      rlc_dl_stats, rlc_ul_stats,\r\n      pdcp_dl_stats, pdcp_ul_stats\r\n| distinct imsi\r\n| order by imsi asc",
                              "typeSettings": {
                                "additionalResourceOptions": [],
                                "showDefault": false
                              },
                              "timeContext": {
                                "durationMs": 0
                              },
                              "timeContextFromParameter": "timeparameter",
                              "queryType": 0,
                              "resourceType": "microsoft.operationalinsights/workspaces",
                              "value": "imsi-001011230010159"
                            }
                          ],
                          "style": "pills",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces"
                        },
                        "name": "parameters - 2"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\n\r\nlet phyuls = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| extend \r\n    avgSinr = todouble(stats_d.avg_sinr),\r\n    avgRsrp = todouble(stats_d.avg_rsrp)\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| summarize ulSinr_avg=avg(avgSinr), ulRsrp_avg=avg(avgRsrp) by imsi\r\n;\r\nlet phy_ul_stats = \r\n    (phyuls\r\n    | project imsi, ulSinr_avg, ulRsrp_avg\r\n    )\r\n    | union (\r\n        phyuls\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", ulSinr_avg=real(null), ulRsrp_avg=real(null)\r\n    );\r\n\r\nlet macd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_DL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend \r\n    txCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts),\r\n    reTxCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend failureRate = iif(txCount + reTxCount == 0, 0.0, reTxCount  * 100.0 / (txCount + reTxCount))\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    dlHarq_avgF=avg(failureRate) by imsi\r\n;\r\nlet mac_dl_harq_failures = \r\n    (macd\r\n    | project imsi, dlHarq_avgF\r\n    )\r\n    | union (\r\n        macd\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", dlHarq_avgF=real(null)\r\n    );\r\n\r\nlet macu = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend \r\n    txCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts),\r\n    reTxCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend failureRate = iif(txCount + reTxCount == 0, 0.0, reTxCount  * 100.0 / (txCount + reTxCount))\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    ulHarq_avgF=avg(failureRate) by imsi\r\n;\r\nlet mac_ul_harq_failures = \r\n    (macu\r\n    | project imsi, ulHarq_avgF\r\n    )\r\n    | union (\r\n        macu\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", ulHarq_avgF=real(null)\r\n    );\r\n\r\nlet rlcd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduTxDelay = todouble(stats_d.sdu_tx_completed.avg) / 1000000,\r\n  numSduTx = toint(stats_d.sdu_tx_completed.count),\r\n  avgSduDeliveryDelay = todouble(stats_d.sdu_tx_delivered.avg) / 1000000,\r\n  avgSduQueueBytes = todouble(stats_d.sdu_queue_bytes.avg),\r\n  pduTxBytes = todouble(stats_d.pdu_tx_bytes.total)\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    rlc_dl_SduTxLatency_avg=avg(avgSduTxDelay), \r\n    rlc_dl_SduDeliveryLatency_avg=avg(avgSduDeliveryDelay), \r\n    rlc_dl_SduQueueBytes_avg=avg(avgSduQueueBytes) by imsi\r\n;\r\nlet rlc_dl_stats = \r\n    (rlcd\r\n    | project imsi, rlc_dl_SduTxLatency_avg, rlc_dl_SduDeliveryLatency_avg, rlc_dl_SduQueueBytes_avg\r\n    )\r\n    | union (\r\n        rlcd\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", rlc_dl_SduTxLatency_avg=real(null), rlc_dl_SduDeliveryLatency_avg=real(null), rlc_dl_SduQueueBytes_avg=real(null)\r\n    );\r\n\r\nlet rlcu = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduDeliveryDelay = todouble(stats_d.sdu_delivered_latency.avg) / 1000000,\r\n  avgSduQueueBytes = todouble(stats_d.sdu_queue_bytes.avg)\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize rlc_ul_SduDeliveryLatency_avg=avg(avgSduDeliveryDelay) by imsi\r\n;\r\n\r\nlet rlc_ul_stats = \r\n    (rlcu\r\n    | project imsi, rlc_ul_SduDeliveryLatency_avg\r\n    )\r\n    | union (\r\n        rlcu\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", rlc_ul_SduDeliveryLatency_avg=real(null)\r\n    );\r\n\r\nlet pdcpd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  sduDiscarded = todouble(stats_d.sdu_discarded),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg),\r\n  sduTxLatency_avg = todouble(stats_d.sdu_tx_latency.avg) / 1e6\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    pdcp_dl_sduDiscarded_avg=avg(sduDiscarded),\r\n    pdcp_dl_pduWindowPkts_avg=avg(pduWindowPkts_avg),\r\n    pdcp_dl_sduTxLatency_avg=avg(sduTxLatency_avg) by imsi\r\n;\r\n\r\nlet pdcp_dl_stats = \r\n    (pdcpd\r\n    | project imsi, pdcp_dl_sduDiscarded_avg, pdcp_dl_pduWindowPkts_avg, pdcp_dl_sduTxLatency_avg\r\n    )\r\n    | union (\r\n        pdcpd\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", \r\n        pdcp_dl_sduDiscarded_avg=real(null), pdcp_dl_pduWindowPkts_avg=real(null), pdcp_dl_sduTxLatency_avg=real(null)\r\n    );\r\n\r\nlet pdcpu = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg)  \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    pdcp_ul_pduWindowPkts_avg=avg(pduWindowPkts_avg) by imsi\r\n;\r\n\r\nlet pdcp_ul_stats = \r\n    (pdcpu\r\n    | project imsi, pdcp_ul_pduWindowPkts_avg\r\n    )\r\n    | union (\r\n        pdcpu\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", \r\n        pdcp_ul_pduWindowPkts_avg=real(null)\r\n    );\r\n\r\nlet rlcdt = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  numSduTx = toint(stats_d.sdu_tx_completed.count)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\\r\\n\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    rlc_dl_SduTxCount=sum(numSduTx) by imsi\r\n;\r\n\r\nlet rlc_dl_traffic_stats = \r\n    (rlcdt\r\n    | project imsi, rlc_dl_SduTxCount\r\n    )\r\n    | union (\r\n        rlcdt\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", rlc_dl_SduTxCount=long(null)\r\n    );\r\n\r\nlet pdcpdt = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  newSdus = toint(stats_d.sdu_new_bytes.count)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\\r\\n\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    pdcp_dl_newSdus=sum(newSdus) by imsi\r\n;\r\n\r\nlet pdcp_dl_traffic_stats = \r\n    (pdcpdt\r\n    | project imsi, pdcp_dl_newSdus\r\n    )\r\n    | union (\r\n        pdcpdt\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", pdcp_dl_newSdus=long(null)\r\n    );\r\n\r\n\r\nlet pdcput = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg),\r\n  sduDeliveredBytes = todouble(stats_d.sdu_delivered_bytes.total)  \r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\\r\\n\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    pdcp_ul_sduDeliveredBytes=sum(sduDeliveredBytes) by imsi\r\n;\r\n\r\nlet pdcp_ul_traffic_stats = \r\n    (pdcput\r\n    | project imsi, pdcp_ul_sduDeliveredBytes\r\n    )\r\n    | union (\r\n        pdcput\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", pdcp_ul_sduDeliveredBytes=real(null)\r\n    );\r\n\r\n// Collate all results\r\nlet summary = phy_ul_stats\r\n| join kind=fullouter  mac_dl_harq_failures on imsi\r\n| join kind=fullouter  mac_ul_harq_failures on imsi\r\n| join kind=fullouter  rlc_dl_stats on imsi\r\n| join kind=fullouter  rlc_ul_stats on imsi\r\n| join kind=fullouter  pdcp_dl_stats on imsi\r\n| join kind=fullouter  pdcp_ul_stats on imsi\r\n| join kind=fullouter  rlc_dl_traffic_stats on imsi\r\n| join kind=fullouter  pdcp_dl_traffic_stats on imsi\r\n| join kind=fullouter  pdcp_ul_traffic_stats on imsi\r\n;\r\n\r\nlet good=2;\r\nlet empty=1;\r\nlet bad=0;\r\n\r\nlet good_emoji = \"✅\";\r\nlet empty_emoji = \"⚪\";\r\nlet bad_emoji = \"❌\";\r\n\r\nlet result = summary\r\n| extend ulSinrResult = case(\r\n    isnull(ulSinr_avg) or isnan(ulSinr_avg), empty,\r\n    ulSinr_avg > {PhyUlSinrThreshold}, good,\r\n    bad\r\n)\r\n| extend ulRsrpResult = case(\r\n    isnull(ulRsrp_avg) or isnan(ulRsrp_avg), empty,\r\n    ulRsrp_avg > {PhyUlRsrpThreshold}, good,\r\n    bad\r\n)\r\n| extend PhyResult = case(\r\n    (ulSinrResult == bad or ulRsrpResult == bad), bad,\r\n    (ulSinrResult == empty or ulRsrpResult == empty), empty,\r\n    good\r\n    )\r\n| extend dlHarqResult = case(\r\n    isnull(dlHarq_avgF) or isnan(dlHarq_avgF), empty,\r\n    dlHarq_avgF < {MacHarqThreshold}, good,\r\n    bad\r\n)\r\n| extend ulHarqResult = case(\r\n    isnull(ulHarq_avgF) or isnan(ulHarq_avgF), empty,\r\n    ulHarq_avgF < {MacHarqThreshold}, good,\r\n    bad\r\n)\r\n| extend MacDlResult = case(\r\n    (dlHarqResult == bad), bad,\r\n    (dlHarqResult == empty), empty,\r\n    good\r\n    )\r\n| extend MacUlResult = case(\r\n    (ulHarqResult == bad), bad,\r\n    (ulHarqResult == empty), empty,\r\n    good\r\n    )\r\n| extend MacResult = min_of(MacDlResult, MacUlResult)\r\n| extend RlcDlSduTxLatencyResult = case(\r\n    isnull(rlc_dl_SduTxLatency_avg) or isnan(rlc_dl_SduTxLatency_avg), empty,\r\n    rlc_dl_SduTxLatency_avg < {RlcDlSduTransmissionThreshold}, good,\r\n    bad\r\n)\r\n| extend RlcDlSduDeliveryLatencyResult = case(\r\n    isnull(rlc_dl_SduDeliveryLatency_avg) or isnan(rlc_dl_SduDeliveryLatency_avg), empty,\r\n    rlc_dl_SduDeliveryLatency_avg < {RlcDlSduDeliveryThreshold}, good,\r\n    bad\r\n)\r\n| extend RlcDlSduQueueBytesResult = case(\r\n    isnull(rlc_dl_SduQueueBytes_avg) or isnan(rlc_dl_SduQueueBytes_avg), empty,\r\n    rlc_dl_SduQueueBytes_avg < {RlcDlSduQueueBytesThreshold}, good,\r\n    bad\r\n)\r\n| extend RlcUlSduDeliveryLatencyResult = case(\r\n    isnull(rlc_ul_SduDeliveryLatency_avg) or isnan(rlc_ul_SduDeliveryLatency_avg), empty,\r\n    rlc_ul_SduDeliveryLatency_avg < {RlcUlSduDeliveryThreshold}, good,\r\n    bad\r\n)\r\n| extend RlcDlResult = case(\r\n    (RlcDlSduTxLatencyResult == bad or RlcDlSduDeliveryLatencyResult == bad or RlcDlSduQueueBytesResult == bad), bad,\r\n    (RlcDlSduTxLatencyResult == empty or RlcDlSduDeliveryLatencyResult == empty or RlcDlSduQueueBytesResult == empty), empty,\r\n    good\r\n    )\r\n| extend RlcUlResult = case(\r\n    (RlcUlSduDeliveryLatencyResult == bad), bad,\r\n    (RlcUlSduDeliveryLatencyResult == empty), empty,\r\n    good\r\n    )\r\n| extend RlcResult = min_of(RlcDlResult, RlcUlResult)\r\n| extend PdcpDlSduTxLatencyResult = case(\r\n    isnull(pdcp_dl_sduTxLatency_avg) or isnan(pdcp_dl_sduTxLatency_avg), empty,\r\n    pdcp_dl_sduTxLatency_avg < {PdcpDlSduTransmissionThreshold}, good,\r\n    bad\r\n)\r\n| extend PdcpDlSduDiscardedResult = case(\r\n    isnull(pdcp_dl_sduDiscarded_avg) or isnan(pdcp_dl_sduDiscarded_avg), good,\r\n    pdcp_dl_sduDiscarded_avg < {PdcpDlSduDiscardedThreshold}, good,\r\n    bad\r\n)\r\n| extend PdcpDlPduWindowPktsResult = case(\r\n    isnull(pdcp_dl_pduWindowPkts_avg) or isnan(pdcp_dl_pduWindowPkts_avg), empty,\r\n    pdcp_dl_pduWindowPkts_avg < {PdcpDlPduWindowPktsThreshold}, good,\r\n    bad\r\n)\r\n| extend PdcpUlPduWindowPktsResult = case(\r\n    isnull(pdcp_ul_pduWindowPkts_avg) or isnan(pdcp_ul_pduWindowPkts_avg), empty,\r\n    pdcp_ul_pduWindowPkts_avg < {PdcpUlPduWindowPktsThreshold}, good,\r\n    bad\r\n)\r\n| extend PdcpDlResult = case(\r\n    (PdcpDlSduTxLatencyResult == bad or PdcpDlSduDiscardedResult == bad or PdcpDlPduWindowPktsResult == bad), bad,\r\n    (PdcpDlSduTxLatencyResult == empty or PdcpDlSduDiscardedResult == empty or PdcpDlPduWindowPktsResult == empty), empty,\r\n    good\r\n)\r\n| extend PdcpUlResult = case(\r\n    (PdcpUlPduWindowPktsResult == bad), bad,\r\n    (PdcpUlPduWindowPktsResult == empty), empty,\r\n    good\r\n)\r\n| extend PdcpResult = min_of(PdcpDlResult, PdcpUlResult)\r\n| extend TrafficDlResult = case(\r\n    isnull(pdcp_dl_newSdus), bad,\r\n    isnull(rlc_dl_SduTxCount), bad,\r\n    pdcp_dl_newSdus < {TrafficDlThreshold}, bad,\r\n    rlc_dl_SduTxCount < {TrafficDlThreshold}, bad,\r\n    // check that the pdcp_dl_newSdus and rlc_dl_SduTxCount aew within 10% of each other\r\n    abs(pdcp_dl_newSdus - rlc_dl_SduTxCount) <= 0.1 * iif(pdcp_dl_newSdus > rlc_dl_SduTxCount, pdcp_dl_newSdus, rlc_dl_SduTxCount), good,\r\n    bad\r\n)\r\n| extend TrafficUlResult = case(\r\n    isnull(pdcp_ul_sduDeliveredBytes) or isnan(pdcp_ul_sduDeliveredBytes), bad,\r\n    pdcp_ul_sduDeliveredBytes < {TrafficUlThreshold}, bad,\r\n    good\r\n)\r\n| extend PHY = case(\r\n    PhyResult == empty, empty_emoji,\r\n    PhyResult == good, good_emoji,\r\n    PhyResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n| extend MACUL = case(\r\n    MacUlResult == empty, empty_emoji,\r\n    MacUlResult == good, good_emoji,\r\n    MacUlResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n| extend MACDL = case(\r\n    MacDlResult == empty, empty_emoji,\r\n    MacDlResult == good, good_emoji,\r\n    MacDlResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n| extend RLCUL = case(\r\n    RlcUlResult == empty, empty_emoji,\r\n    RlcUlResult == good, good_emoji,\r\n    RlcUlResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n| extend RLCDL = case(\r\n    RlcDlResult == empty, empty_emoji,\r\n    RlcDlResult == good, good_emoji,\r\n    RlcDlResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n| extend PDCPUL = case(\r\n    PdcpUlResult == empty, empty_emoji,\r\n    PdcpUlResult == good, good_emoji,\r\n    PdcpUlResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n| extend PDCPDL = case(\r\n    PdcpDlResult == empty, empty_emoji,\r\n    PdcpDlResult == good, good_emoji,\r\n    PdcpDlResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n| extend TrafficDL = case(\r\n    TrafficDlResult == empty, empty_emoji,\r\n    TrafficDlResult == good, good_emoji,\r\n    TrafficDlResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n| extend TrafficUL = case(\r\n    TrafficUlResult == empty, empty_emoji,\r\n    TrafficUlResult == good, good_emoji,\r\n    TrafficUlResult == bad, bad_emoji,\r\n    \"❓\" \r\n    )\r\n\r\n// collate all results to form overall Status for the UE\r\n| extend StatusResult=(PhyResult + MacResult + RlcResult + PdcpResult + TrafficDlResult + TrafficUlResult)\r\n| extend Status = case(\r\n    StatusResult >= (6 * good), good_emoji,\r\n    bad_emoji\r\n    )\r\n\r\n| project Status, PHY, MACUL, MACDL, RLCUL, RLCDL, PDCPUL, PDCPDL, TrafficUL, TrafficDL\r\n;\r\n\r\nresult\r\n| project-rename \r\n    ['MAC-UL'] = MACUL,\r\n    ['MAC-DL'] = MACDL,\r\n    ['RLC-UL'] = RLCUL,\r\n    ['RLC-DL'] = RLCDL,\r\n    ['PDCP-UL'] = PDCPUL,\r\n    ['PDCP-DL'] = PDCPDL,\r\n    ['Traffic-UL'] = TrafficUL,\r\n    ['Traffic-DL'] = TrafficDL\r\n",
                          "size": 1,
                          "aggregation": 3,
                          "timeContextFromParameter": "timeparameter",
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "visualization": "table",
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "imsi",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "26%"
                                }
                              },
                              {
                                "columnMatch": "Status",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "26%"
                                }
                              },
                              {
                                "columnMatch": "PHY",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "MAC",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "RLC",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "PDCP",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "TrafficDL",
                                "formatter": 1
                              },
                              {
                                "columnMatch": "TrafficUL",
                                "formatter": 1
                              }
                            ]
                          },
                          "sortBy": []
                        },
                        "customWidth": "100",
                        "name": "query - 0 - Copy"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "title": "PHY",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let good=2;\r\nlet empty=1;\r\nlet bad=0;\r\n\r\nlet good_emoji = \"✅\";\r\nlet empty_emoji = \"⚪\";\r\nlet bad_emoji = \"❌\";\r\n\r\nlet timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet uls = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = supi\r\n| extend \r\n    avgSinr = todouble(stats_d.avg_sinr),\r\n    avgRsrp = todouble(stats_d.avg_rsrp)\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| summarize ulSinr_avg=avg(avgSinr), ulRsrp_avg=avg(avgRsrp) by imsi\r\n;\r\nlet ul_stats = \r\n    (uls\r\n    | project ulSinr_avg, ulRsrp_avg\r\n    )\r\n    | union (\r\n        uls\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project ulSinr_avg=real(null), ulRsrp_avg=real(null)\r\n    );\r\nul_stats\r\n| extend ulSinr = case(\r\n    isnull(ulSinr_avg) or isnan(ulSinr_avg), empty_emoji,\r\n    ulSinr_avg > {PhyUlSinrThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n| extend ulRsrp = case(\r\n    isnull(ulRsrp_avg) or isnan(ulRsrp_avg), empty_emoji,\r\n    ulRsrp_avg > {PhyUlRsrpThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n\r\n\r\n| project \r\n    ulSinr, ulSinr_avg,\r\n    ulRsrp, ulRsrp_avg \r\n\r\n| extend MetricPairs = pack_array(\r\n    pack(\"Metric\", \"UL SINR\", \"Status\", ulSinr, \"Avg\", coalesce(ulSinr_avg, real(0))),\r\n    pack(\"Metric\", \"UL RSRP\", \"Status\", ulRsrp, \"Avg\", coalesce(ulRsrp_avg, real(0)))\r\n)\r\n| mv-expand Pair = MetricPairs\r\n| project \r\n    Metric = tostring(Pair[\"Metric\"]), \r\n    Status = tostring(Pair[\"Status\"]),\r\n    Avg = strcat(round(todouble(Pair[\"Avg\"]), 2))\r\n",
                                "size": 1,
                                "aggregation": 3,
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "tileSettings": {
                                  "showBorder": false
                                },
                                "graphSettings": {
                                  "type": 0
                                },
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PhyUlSinrMediumThreshold}",
                                  "customThresholdLineStyle": 5
                                },
                                "mapSettings": {
                                  "locInfo": "LatLong"
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = supi\r\n| extend \r\n    avgSinr = todouble(stats_d.avg_sinr)\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isnull(avgSinr)) and not(isnan(avgSinr)) \r\n| project timestamp, avgSinr\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(avgSinr)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"SINR\"\r\n    | make-series value = avg(avgSinr)\r\n        default=-50\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n\r\n\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "UL SINR (dB)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PhyUlSinrThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = supi\r\n| extend \r\n    avgRsrp = todouble(stats_d.avg_rsrp)\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isnull(avgRsrp)) and not(isnan(avgRsrp)) \r\n| project timestamp, avgRsrp\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(avgRsrp)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"RSRP\"\r\n    | make-series value = avg(avgRsrp)\r\n        default=-150\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "UL RSRP (dBm)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PhyUlRsrpThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            }
                          ]
                        },
                        "name": "perUEPHY"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "title": "MAC",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let good=2;\r\nlet empty=1;\r\nlet bad=0;\r\n\r\nlet good_emoji = \"✅\";\r\nlet empty_emoji = \"⚪\";\r\nlet bad_emoji = \"❌\";\r\n\r\nlet timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\n\r\nlet macd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_DL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend \r\n    txCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts),\r\n    reTxCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend failureRate = iif(txCount + reTxCount == 0, 0.0, reTxCount  * 100.0 / (txCount + reTxCount))\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    dlHarq_avgF=avg(failureRate) by imsi\r\n;\r\nlet mac_dl_harq_failures = \r\n    (macd\r\n    | project imsi, dlHarq_avgF\r\n    )\r\n    | union (\r\n        macd\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", dlHarq_avgF=real(null)\r\n    );\r\n\r\nlet macu = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend \r\n    txCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts),\r\n    reTxCount = toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend failureRate = iif(txCount + reTxCount == 0, 0.0, reTxCount  * 100.0 / (txCount + reTxCount))\r\n| extend imsi = supi\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    ulHarq_avgF=avg(failureRate) by imsi\r\n;\r\nlet mac_ul_harq_failures = \r\n    (macu\r\n    | project imsi, ulHarq_avgF\r\n    )\r\n    | union (\r\n        macu\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", ulHarq_avgF=real(null)\r\n    );\r\n\r\n\r\nmac_dl_harq_failures\r\n| join kind=fullouter  mac_ul_harq_failures on imsi\r\n\r\n| extend dlHarqResult = case(\r\n    isnull(dlHarq_avgF) or isnan(dlHarq_avgF), empty_emoji,\r\n    dlHarq_avgF < {MacHarqThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n| extend ulHarqResult = case(\r\n    isnull(ulHarq_avgF) or isnan(ulHarq_avgF), empty_emoji,\r\n    ulHarq_avgF < {MacHarqThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n\r\n| project \r\n    dlHarqResult, \r\n    ulHarqResult, \r\n    dlHarq_avgF,\r\n    ulHarq_avgF\r\n| extend MetricPairs = pack_array(\r\n    pack(\"Metric\", \"DL HARQ\", \"Status\", dlHarqResult, \"Avg\", coalesce(dlHarq_avgF, real(0))),\r\n    pack(\"Metric\", \"UL HARQ\", \"Status\", ulHarqResult, \"Avg\", coalesce(ulHarq_avgF, real(0)))\r\n)\r\n| mv-expand Pair = MetricPairs\r\n| project \r\n    Metric = tostring(Pair[\"Metric\"]), \r\n    Status = tostring(Pair[\"Status\"]),\r\n    Avg = strcat(round(todouble(Pair[\"Avg\"]), 2))\r\n\r\n",
                                "size": 1,
                                "aggregation": 3,
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "tileSettings": {
                                  "showBorder": false
                                },
                                "graphSettings": {
                                  "type": 0
                                },
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PhyUlSinrMediumThreshold}",
                                  "customThresholdLineStyle": 5
                                },
                                "mapSettings": {
                                  "locInfo": "LatLong"
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_DL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = supi\r\n| extend txCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts), reTxCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend failureRate = iif(txCount + reTxCount == 0, 0.0, reTxCount  * 100.0 / (txCount + reTxCount))\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isnull(failureRate)) and not(isnan(failureRate)) \r\n| project timestamp, failureRate\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(failureRate)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"failureRate\"\r\n    | make-series value = avg(failureRate)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label\r\n| mv-expand timestamp, value\r\n| project timestamp = todatetime(timestamp), value = toreal(value), label\r\n| where isnotnull(value);\r\nactual_tb\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "DL HARQ Failure (%)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{MacHarqThreshold}",
                                  "customThresholdLineStyle": 5,
                                  "ySettings": {
                                    "min": 0,
                                    "max": 100
                                  }
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = supi\r\n| extend txCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts), reTxCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend failureRate = iif(txCount + reTxCount == 0, 0.0, reTxCount  * 100.0 / (txCount + reTxCount))\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isnull(failureRate)) and not(isnan(failureRate)) \r\n| project timestamp, failureRate\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(failureRate)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"failureRate\"\r\n    | make-series value = avg(failureRate)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "UL HARQ Failure (%)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{MacHarqThreshold}",
                                  "customThresholdLineStyle": 5,
                                  "ySettings": {
                                    "min": 0,
                                    "max": 100
                                  }
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            }
                          ]
                        },
                        "name": "perUEMAC"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "title": "RLC",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let good=2;\r\nlet empty=1;\r\nlet bad=0;\r\n\r\nlet good_emoji = \"✅\";\r\nlet empty_emoji = \"⚪\";\r\nlet bad_emoji = \"❌\";\r\n\r\nlet timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\n\r\nlet rlcd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduTxDelay = todouble(stats_d.sdu_tx_completed.avg) / 1000000,\r\n  numSduTx = toint(stats_d.sdu_tx_completed.count),\r\n  avgSduDeliveryDelay = todouble(stats_d.sdu_tx_delivered.avg) / 1000000,\r\n  avgSduQueueBytes = todouble(stats_d.sdu_queue_bytes.avg),\r\n  pduTxBytes = todouble(stats_d.pdu_tx_bytes.total)\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    rlc_dl_SduTxLatency_avg=avg(avgSduTxDelay), \r\n    rlc_dl_SduDeliveryLatency_avg=avg(avgSduDeliveryDelay), \r\n    rlc_dl_SduQueueBytes_avg=avg(avgSduQueueBytes) by imsi\r\n;\r\nlet rlc_dl_stats = \r\n    (rlcd\r\n    | project imsi, rlc_dl_SduTxLatency_avg, rlc_dl_SduDeliveryLatency_avg, rlc_dl_SduQueueBytes_avg\r\n    )\r\n    | union (\r\n        rlcd\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", rlc_dl_SduTxLatency_avg=real(null), rlc_dl_SduDeliveryLatency_avg=real(null), rlc_dl_SduQueueBytes_avg=real(null)\r\n    );\r\n\r\nlet rlcu = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduDeliveryDelay = todouble(stats_d.sdu_delivered_latency.avg) / 1000000,\r\n  avgSduQueueBytes = todouble(stats_d.sdu_queue_bytes.avg)\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize rlc_ul_SduDeliveryLatency_avg=avg(avgSduDeliveryDelay) by imsi\r\n;\r\n\r\nlet rlc_ul_stats = \r\n    (rlcu\r\n    | project imsi, rlc_ul_SduDeliveryLatency_avg\r\n    )\r\n    | union (\r\n        rlcu\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", rlc_ul_SduDeliveryLatency_avg=real(null)\r\n    );\r\n\r\nrlc_dl_stats\r\n| join kind=fullouter  rlc_ul_stats on imsi\r\n\r\n| extend RlcDlSduTxLatencyResult = case(\r\n    isnull(rlc_dl_SduTxLatency_avg) or isnan(rlc_dl_SduTxLatency_avg), empty_emoji,\r\n    rlc_dl_SduTxLatency_avg < {RlcDlSduTransmissionThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n| extend RlcDlSduDeliveryLatencyResult = case(\r\n    isnull(rlc_dl_SduDeliveryLatency_avg) or isnan(rlc_dl_SduDeliveryLatency_avg), empty_emoji,\r\n    rlc_dl_SduDeliveryLatency_avg < {RlcDlSduDeliveryThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n| extend RlcDlSduQueueBytesResult = case(\r\n    isnull(rlc_dl_SduQueueBytes_avg) or isnan(rlc_dl_SduQueueBytes_avg), empty_emoji,\r\n    rlc_dl_SduQueueBytes_avg < {RlcDlSduQueueBytesThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n| extend RlcUlSduDeliveryLatencyResult = case(\r\n    isnull(rlc_ul_SduDeliveryLatency_avg) or isnan(rlc_ul_SduDeliveryLatency_avg), empty_emoji,\r\n    rlc_ul_SduDeliveryLatency_avg < {RlcUlSduDeliveryThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n\r\n\r\n| project \r\n    RlcDlSduTxLatencyResult, rlc_dl_SduTxLatency_avg,\r\n    RlcDlSduDeliveryLatencyResult, rlc_dl_SduDeliveryLatency_avg,\r\n    RlcDlSduQueueBytesResult, rlc_dl_SduQueueBytes_avg, \r\n    RlcUlSduDeliveryLatencyResult, rlc_ul_SduDeliveryLatency_avg\r\n\r\n| extend MetricPairs = pack_array(\r\n    pack(\"Metric\", \"DL Tx latency\", \"Status\", RlcDlSduTxLatencyResult, \"Avg\", iif(isnan(rlc_dl_SduTxLatency_avg), 0.0, rlc_dl_SduTxLatency_avg)),\r\n    pack(\"Metric\", \"DL Delivery latency\", \"Status\", RlcDlSduDeliveryLatencyResult, \"Avg\", iif(isnan(rlc_dl_SduDeliveryLatency_avg), 0.0, rlc_dl_SduDeliveryLatency_avg)),\r\n    pack(\"Metric\", \"DL SDU Queue\", \"Status\", RlcDlSduQueueBytesResult, \"Avg\", iif(isnan(rlc_dl_SduQueueBytes_avg), 0.0, rlc_dl_SduQueueBytes_avg)),\r\n    pack(\"Metric\", \"UL Delivery latency\", \"Status\", RlcUlSduDeliveryLatencyResult, \"Avg\", iif(isnan(rlc_ul_SduDeliveryLatency_avg), 0.0, rlc_ul_SduDeliveryLatency_avg))\r\n)\r\n| mv-expand Pair = MetricPairs\r\n| project \r\n    Metric = tostring(Pair[\"Metric\"]), \r\n    Status = tostring(Pair[\"Status\"]),\r\n    Avg = strcat(round(todouble(Pair[\"Avg\"]), 2))\r\n",
                                "size": 1,
                                "aggregation": 3,
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "tileSettings": {
                                  "showBorder": false
                                },
                                "graphSettings": {
                                  "type": 0
                                },
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PhyUlSinrMediumThreshold}",
                                  "customThresholdLineStyle": 5
                                },
                                "mapSettings": {
                                  "locInfo": "LatLong"
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduTxDelay = todouble(stats_d.sdu_tx_completed.avg) / 1000000\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| where not(isnull(avgSduTxDelay)) and not(isnan(avgSduTxDelay)) \r\n| project timestamp, avgSduTxDelay\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(avgSduTxDelay)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"SduTxDelay\"\r\n    | make-series value = avg(avgSduTxDelay)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "DL SDU Tx Latency (ms)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{RlcDlSduTransmissionThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduDeliveryDelay = todouble(stats_d.sdu_tx_delivered.avg) / 1000000\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| where not(isnull(avgSduDeliveryDelay)) and not(isnan(avgSduDeliveryDelay)) \r\n| project timestamp, avgSduDeliveryDelay\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(avgSduDeliveryDelay)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"SduDeliveryDelay\"\r\n    | make-series value = avg(avgSduDeliveryDelay)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "DL SDU Delivery Latency (ms)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{RlcDlSduDeliveryThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduQueueBytes = todouble(stats_d.sdu_queue_bytes.avg)\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| where not(isnull(avgSduQueueBytes)) and not(isnan(avgSduQueueBytes)) \r\n| project timestamp, avgSduQueueBytes\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(avgSduQueueBytes)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"SduQueueBytes\"\r\n    | make-series value = avg(avgSduQueueBytes)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "DL SDU Queue (bytes)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{RlcDlSduQueueBytesThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  avgSduDeliveryDelay = todouble(stats_d.sdu_delivered_latency.avg) / 1000000\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n//| where not(isnull(avgSduDeliveryDelay)) and not(isnan(avgSduDeliveryDelay)) \r\n| project timestamp, avgSduDeliveryDelay, stats_d\r\n;\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(avgSduDeliveryDelay)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"SduDeliveryDelay\"\r\n    | make-series value = avg(avgSduDeliveryDelay)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "UL SDU Delivery Latency (ms)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{RlcUlSduDeliveryThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy - Copy"
                            }
                          ]
                        },
                        "name": "perUERLC"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "title": "PDCP",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let good=2;\r\nlet empty=1;\r\nlet bad=0;\r\n\r\nlet good_emoji = \"✅\";\r\nlet empty_emoji = \"⚪\";\r\nlet bad_emoji = \"❌\";\r\n\r\nlet timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\n\r\nlet pdcpd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  sduDiscarded = todouble(stats_d.sdu_discarded),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg),\r\n  sduTxLatency_avg = todouble(stats_d.sdu_tx_latency.avg) / 1e6\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    pdcp_dl_sduDiscarded_avg=avg(sduDiscarded),\r\n    pdcp_dl_pduWindowPkts_avg=avg(pduWindowPkts_avg),\r\n    pdcp_dl_sduTxLatency_avg=avg(sduTxLatency_avg) by imsi\r\n;\r\n\r\nlet pdcp_dl_stats = \r\n    (pdcpd\r\n    | project imsi, pdcp_dl_sduDiscarded_avg, pdcp_dl_pduWindowPkts_avg, pdcp_dl_sduTxLatency_avg\r\n    )\r\n    | union (\r\n        pdcpd\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", \r\n        pdcp_dl_sduDiscarded_avg=real(null), pdcp_dl_pduWindowPkts_avg=real(null), pdcp_dl_sduTxLatency_avg=real(null)\r\n    );\r\n\r\nlet pdcpu = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg)  \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize \r\n    pdcp_ul_pduWindowPkts_avg=avg(pduWindowPkts_avg) by imsi\r\n;\r\n\r\nlet pdcp_ul_stats = \r\n    (pdcpu\r\n    | project imsi, pdcp_ul_pduWindowPkts_avg\r\n    )\r\n    | union (\r\n        pdcpu\r\n        | summarize count() \r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", \r\n        pdcp_ul_pduWindowPkts_avg=real(null)\r\n    );\r\n\r\npdcp_dl_stats\r\n| join kind=fullouter pdcp_ul_stats on imsi\r\n\r\n| extend PdcpDlSduTxLatencyResult = case(\r\n    isnull(pdcp_dl_sduTxLatency_avg) or isnan(pdcp_dl_sduTxLatency_avg), empty_emoji,\r\n    pdcp_dl_sduTxLatency_avg < {PdcpDlSduTransmissionThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n| extend PdcpDlSduDiscardedResult = case(\r\n    isnull(pdcp_dl_sduDiscarded_avg) or isnan(pdcp_dl_sduDiscarded_avg), good_emoji,\r\n    pdcp_dl_sduDiscarded_avg < {PdcpDlSduDiscardedThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n| extend PdcpDlPduWindowPktsResult = case(\r\n    isnull(pdcp_dl_pduWindowPkts_avg) or isnan(pdcp_dl_pduWindowPkts_avg), empty_emoji,\r\n    pdcp_dl_pduWindowPkts_avg < {PdcpDlPduWindowPktsThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n| extend PdcpUlPduWindowPktsResult = case(\r\n    isnull(pdcp_ul_pduWindowPkts_avg) or isnan(pdcp_ul_pduWindowPkts_avg), empty_emoji,\r\n    pdcp_ul_pduWindowPkts_avg < {PdcpUlPduWindowPktsThreshold}, good_emoji,\r\n    bad_emoji\r\n)\r\n\r\n| project \r\n PdcpDlSduTxLatencyResult,\r\n    pdcp_dl_sduTxLatency_avg = coalesce(pdcp_dl_sduTxLatency_avg, 0.0),\r\n    PdcpDlSduDiscardedResult,\r\n    pdcp_dl_sduDiscarded_avg = coalesce(pdcp_dl_sduDiscarded_avg, 0.0),\r\n    PdcpDlPduWindowPktsResult,\r\n    pdcp_dl_pduWindowPkts_avg = coalesce(pdcp_dl_pduWindowPkts_avg, 0.0),\r\n    PdcpUlPduWindowPktsResult,\r\n    pdcp_ul_pduWindowPkts_avg = coalesce(pdcp_ul_pduWindowPkts_avg, 0.0)\r\n\r\n| extend MetricPairs = pack_array(\r\n    pack(\"Metric\", \"DL Tx latency\", \"Status\", PdcpDlSduTxLatencyResult, \"Avg\", iif(isnan(pdcp_dl_sduTxLatency_avg), 0.0, pdcp_dl_sduTxLatency_avg)),\r\n    pack(\"Metric\", \"DL SDUs discarded\", \"Status\", PdcpDlSduDiscardedResult, \"Avg\", iif(isnan(pdcp_dl_sduDiscarded_avg), 0.0, pdcp_dl_sduDiscarded_avg)),\r\n    pack(\"Metric\", \"DL PDU Window\", \"Status\", PdcpDlPduWindowPktsResult, \"Avg\", iif(isnan(pdcp_dl_pduWindowPkts_avg), 0.0, pdcp_dl_pduWindowPkts_avg)),\r\n    pack(\"Metric\", \"UL PDU Window\", \"Status\", PdcpUlPduWindowPktsResult, \"Avg\", iif(isnan(pdcp_ul_pduWindowPkts_avg), 0.0, pdcp_ul_pduWindowPkts_avg))\r\n)| mv-expand Pair = MetricPairs\r\n| project \r\n    Metric = tostring(Pair[\"Metric\"]), \r\n    Status = tostring(Pair[\"Status\"]),\r\n    Avg = strcat(round(todouble(Pair[\"Avg\"]), 2))\r\n    ",
                                "size": 1,
                                "aggregation": 3,
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "tileSettings": {
                                  "showBorder": false
                                },
                                "graphSettings": {
                                  "type": 0
                                },
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PhyUlSinrMediumThreshold}",
                                  "customThresholdLineStyle": 5
                                },
                                "mapSettings": {
                                  "locInfo": "LatLong"
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  sduTxLatency_avg = todouble(stats_d.sdu_tx_latency.avg) / 1e6\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project timestamp, sduTxLatency_avg, nu=isnull(sduTxLatency_avg)\r\n| where not(isnull(sduTxLatency_avg)) and not(isnan(sduTxLatency_avg)) \r\n| project timestamp, sduTxLatency_avg\r\n;\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(sduTxLatency_avg)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"sduTxLatency\"\r\n    | make-series value = avg(sduTxLatency_avg)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "DL Tx latency (ms)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PdcpDlSduTransmissionThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  sduDiscarded = todouble(stats_d.sdu_discarded)\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| project timestamp, sduDiscarded\r\n| where not(isnull(sduDiscarded)) and not(isnan(sduDiscarded)) \r\n| project timestamp, sduDiscarded\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(sduDiscarded)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"sduDiscarded\"\r\n    | make-series value = avg(sduDiscarded)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n",
                                "size": 1,
                                "aggregation": 3,
                                "title": "DL SDUs discarded",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PdcpDlSduDiscardedThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg)\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isnull(pduWindowPkts_avg)) and not(isnan(pduWindowPkts_avg)) \r\n| project timestamp, pduWindowPkts_avg\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(pduWindowPkts_avg)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"pduWindowPkts\"\r\n    | make-series value = avg(pduWindowPkts_avg)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "DL PDU Window (pkts)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PdcpDlPduWindowPktsThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), \r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  pduWindowPkts_avg = todouble(stats_d.pdu_window_pkts.avg)\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time| \r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isnull(pduWindowPkts_avg)) and not(isnan(pduWindowPkts_avg)) \r\n| project timestamp, pduWindowPkts_avg\r\n;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | where isnotnull(pduWindowPkts_avg)\r\n    | summarize count() > 0\r\n);\r\nlet actual_tb = result\r\n    | extend label = \"pduWindowPkts\"\r\n    | make-series value = avg(pduWindowPkts_avg)\r\n        on timestamp \r\n        from timeStart to timeEnd \r\n        step adjustedStep \r\n        by label;\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\nactual\r\n\r\n",
                                "size": 1,
                                "aggregation": 2,
                                "title": "UL PDU Window (pkts)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PdcpUlPduWindowPktsThreshold}",
                                  "customThresholdLineStyle": 5
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy - Copy - Copy"
                            }
                          ]
                        },
                        "name": "perUEPDCP"
                      },
                      {
                        "type": 12,
                        "content": {
                          "version": "NotebookGroup/1.0",
                          "groupType": "editable",
                          "title": "Traffic",
                          "items": [
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\n \r\nlet rlcd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi),\r\n   isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n   numSduTx = toint(stats_d.sdu_tx_completed.count)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize\r\n   rlc_dl_SduTxCount=sum(numSduTx) by imsi;\r\n    \r\nlet rlc_dl_traffic_stats =\r\n   (rlcd\r\n     | project imsi, rlc_dl_SduTxCount\r\n   )\r\n   | union (\r\n     rlcd\r\n     | summarize count() \r\n     | where count_ == 0\r\n     | project imsi=\"{IMSI}\", rlc_dl_SduTxCount=long(null)\r\n     );\r\n     \r\nlet pdcpd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi),\r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  newSdus = toint(stats_d.sdu_new_bytes.count)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize\r\n    pdcp_dl_newSdus=sum(newSdus) by imsi\r\n;\r\n\r\nlet pdcp_dl_traffic_stats =\r\n    (pdcpd\r\n    | project imsi, pdcp_dl_newSdus\r\n    )\r\n    | union (\r\n        pdcpd\r\n        | summarize count()\r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", pdcp_dl_newSdus=long(null)\r\n    );\r\n\r\n\r\n\r\nlet pdcpu = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi),\r\n  isSRB = toint(stats_d.is_srb), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n  sduDeliveredBytes = tolong(stats_d.sdu_delivered_bytes.count)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| where not(isempty(supi)) // Only include UEs connected for a longer time\r\n| extend imsi = supi\r\n| where imsi == \"{IMSI}\"\r\n| summarize\r\n    pdcp_ul_sduDeliveredBytes=sum(sduDeliveredBytes) by imsi\r\n;\r\n\r\nlet pdcp_ul_traffic_stats =\r\n    (pdcpu\r\n    | project imsi, pdcp_ul_sduDeliveredBytes\r\n    )\r\n    | union (\r\n        pdcpu\r\n        | summarize count()\r\n        | where count_ == 0\r\n        | project imsi=\"{IMSI}\", pdcp_ul_sduDeliveredBytes=long(null)\r\n    );\r\n\r\n\r\n// Collate all results\r\nlet summary = rlc_dl_traffic_stats\r\n| join kind=fullouter  pdcp_dl_traffic_stats on imsi\r\n| join kind=fullouter  pdcp_ul_traffic_stats on imsi\r\n;\r\n\r\nlet good=2;\r\nlet empty=1;\r\nlet bad=0;\r\n\r\nlet good_emoji = \"✅\";\r\nlet empty_emoji = \"⚪\";\r\nlet bad_emoji = \"❌\";\r\n\r\nlet result = summary\r\n| extend TrafficDlRequestedResult = case(\r\n    isnull(pdcp_dl_newSdus), empty_emoji,\r\n    pdcp_dl_newSdus < {TrafficDlThreshold}, bad_emoji,\r\n    good_emoji\r\n)\r\n| extend TrafficDlAchievedResult = case(\r\n    isnull(rlc_dl_SduTxCount), empty_emoji,\r\n    rlc_dl_SduTxCount < {TrafficDlThreshold}, bad_emoji,\r\n    // check that the pdcp_dl_newSdus and rlc_dl_SduTxCount aew within 10% of each other\r\n    abs(pdcp_dl_newSdus - rlc_dl_SduTxCount) <= 0.1 * iif(pdcp_dl_newSdus > rlc_dl_SduTxCount, pdcp_dl_newSdus, rlc_dl_SduTxCount), good_emoji,\r\n    bad_emoji\r\n)\r\n| extend TrafficUlResult = case(\r\n    isnull(pdcp_ul_sduDeliveredBytes), empty_emoji,\r\n    pdcp_ul_sduDeliveredBytes < {TrafficUlThreshold}, bad_emoji,\r\n    good_emoji\r\n)\r\n\r\n| project\r\n    TrafficDlRequestedResult,\r\n    TrafficDlAchievedResult,\r\n    TrafficUlResult,\r\n    pdcp_dl_newSdus,\r\n    rlc_dl_SduTxCount,\r\n    pdcp_ul_sduDeliveredBytes\r\n| extend MetricPairs = pack_array(\r\n    pack(\"Metric\", \"DL (requested)\", \"Status\", TrafficDlRequestedResult, \"Pkts\", coalesce(pdcp_dl_newSdus, 0)),\r\n    pack(\"Metric\", \"DL (Achieved)\", \"Status\", TrafficDlAchievedResult, \"Pkts\", coalesce(rlc_dl_SduTxCount, 0)),\r\n    pack(\"Metric\", \"UL (Achieved)\", \"Status\", TrafficUlResult, \"Pkts\", pdcp_ul_sduDeliveredBytes)\r\n)\r\n| mv-expand Pair = MetricPairs\r\n| project\r\n    Metric = tostring(Pair[\"Metric\"]),\r\n    Status = tostring(Pair[\"Status\"]),\r\n    Pkts = tostring(Pair[\"Pkts\"])\r\n;\r\nresult\r\n\r\n",
                                "size": 1,
                                "aggregation": 3,
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "table",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "tileSettings": {
                                  "showBorder": false
                                },
                                "graphSettings": {
                                  "type": 0
                                },
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ],
                                  "customThresholdLine": "{PhyUlSinrMediumThreshold}",
                                  "customThresholdLineStyle": 5
                                },
                                "mapSettings": {
                                  "locInfo": "LatLong"
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);\r\nlet adjustedStep = baseStep * scaleFactor;\r\n\r\n// -------- RLC DL (Achieved) --------\r\nlet rlcd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg = todynamic(stream_payload_msg_s)\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend imsi = tostring(stats_d.ue_ctx.core_amf_info.supi),\r\n         isSRB = toint(stats_d.is_srb),\r\n         timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n         numSduTx = toint(stats_d.sdu_tx_completed.count)\r\n| where isSRB == 0\r\n| where timestamp between (timeStart .. timeEnd)\r\n| where imsi == \"{IMSI}\"\r\n| project timestamp, RlcNumSduTx = numSduTx;\r\n\r\nlet achieved_actual = rlcd\r\n| extend label = \"DL Achieved\"\r\n| make-series value = sum(RlcNumSduTx)\r\n    on timestamp from timeStart to timeEnd step adjustedStep\r\n    by label;\r\n\r\n// -------- PDCP DL (Requested) --------\r\nlet pdcpd = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg = todynamic(stream_payload_msg_s)\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend imsi = tostring(stats_d.ue_ctx.core_amf_info.supi),\r\n         isSRB = toint(stats_d.is_srb),\r\n         timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n         newSdus = toint(stats_d.sdu_new_bytes.count)\r\n| where isSRB == 0\r\n| where timestamp between (timeStart .. timeEnd)\r\n| where imsi == \"{IMSI}\"\r\n| project timestamp, pdcp_dl_newSdus = newSdus;\r\n\r\nlet requested_actual = pdcpd\r\n| extend label = \"DL Requested\"\r\n| make-series value = sum(pdcp_dl_newSdus)\r\n    on timestamp from timeStart to timeEnd step adjustedStep\r\n    by label;\r\n\r\n// -------- PDCP UL (Achieved) --------\r\nlet pdcpu = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg = todynamic(stream_payload_msg_s)\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend imsi = tostring(stats_d.ue_ctx.core_amf_info.supi),\r\n         isSRB = toint(stats_d.is_srb),\r\n         timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n         sduDeliveredBytes = tolong(stats_d.sdu_delivered_bytes.total)\r\n| where isSRB == 0\r\n| where timestamp between (timeStart .. timeEnd)\r\n| where imsi == \"{IMSI}\"\r\n| project timestamp, pdcp_ul_sduDeliveredBytes = sduDeliveredBytes;\r\n\r\nlet uplink_actual = pdcpu\r\n| extend label = \"UL Achieved\"\r\n| make-series value = sum(pdcp_ul_sduDeliveredBytes)\r\n    on timestamp from timeStart to timeEnd step adjustedStep\r\n    by label;\r\n\r\n// -------- Final timechart --------\r\nachieved_actual\r\n| union requested_actual\r\n| render timechart\r\n\r\n",
                                "size": 1,
                                "title": "DL (Pkts)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ]
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy"
                            },
                            {
                              "type": 3,
                              "content": {
                                "version": "KqlItem/1.0",
                                "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 15s,\r\n    duration >= 15m, 5s,\r\n    5s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  \r\nlet adjustedStep = baseStep * scaleFactor;\r\n\r\nlet result = jrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg = todynamic(stream_payload_msg_s)\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend imsi = tostring(stats_d.ue_ctx.core_amf_info.supi),\r\n         isSRB = toint(stats_d.is_srb),\r\n         timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)),\r\n         sduDeliveredPkts = todouble(stats_d.sdu_delivered_bytes.count)\r\n| where isSRB == 0\r\n| where timestamp between (timeStart .. timeEnd)\r\n| where not(isempty(imsi))\r\n| where imsi == \"{IMSI}\"\r\n| where not(isnull(sduDeliveredPkts)) and not(isnan(sduDeliveredPkts))\r\n| project timestamp, sduDeliveredPkts;\r\n\r\nlet has_data = toscalar(\r\n    result\r\n    | summarize count() > 0\r\n);\r\n\r\nlet actual_tb = result\r\n| extend label = \"UL Achieved\"\r\n| make-series value = sum(sduDeliveredPkts)\r\n    on timestamp from timeStart to timeEnd step adjustedStep\r\n    by label;\r\n\r\nlet empty_tb = datatable(label: string, timestamp: datetime, value: dynamic) [];\r\n\r\nlet actual = \r\n    union actual_tb, empty_tb\r\n    | where has_data or isnull(value);\r\n\r\nactual\r\n",
                                "size": 1,
                                "title": "UL (Pkts)",
                                "timeContextFromParameter": "timeparameter",
                                "queryType": 0,
                                "resourceType": "microsoft.operationalinsights/workspaces",
                                "visualization": "timechart",
                                "gridSettings": {
                                  "formatters": [
                                    {
                                      "columnMatch": "imsi",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "Status",
                                      "formatter": 0,
                                      "formatOptions": {
                                        "customColumnWidthSetting": "26%"
                                      }
                                    },
                                    {
                                      "columnMatch": "PHY",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "MAC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "RLC",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "PDCP",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficDL",
                                      "formatter": 1
                                    },
                                    {
                                      "columnMatch": "TrafficUL",
                                      "formatter": 1
                                    }
                                  ]
                                },
                                "sortBy": [],
                                "chartSettings": {
                                  "seriesLabelSettings": [
                                    {
                                      "seriesName": "tx",
                                      "label": "Tx"
                                    },
                                    {
                                      "seriesName": "retx",
                                      "label": "ReTx"
                                    }
                                  ]
                                }
                              },
                              "customWidth": "20",
                              "name": "query - 0 - Copy - Copy"
                            }
                          ]
                        },
                        "name": "perUETraffic"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedUEStatusTab",
                    "comparison": "isEqualTo",
                    "value": "perUE"
                  },
                  "name": "perUeGroup"
                }
              ]
            },
            "customWidth": "100",
            "name": "group - bytes - Copy"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Overview"
      },
      "customWidth": "100",
      "name": "UEStatusGroup"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "038bb733-c35c-4c2e-883e-95d1d09cb9fe",
            "cellValue": "selectedDetailsTab",
            "linkTarget": "parameter",
            "linkLabel": "Traffic Info",
            "subTarget": "Traffic",
            "preText": "Traffic Info",
            "style": "link"
          },
          {
            "id": "5c8c745d-d324-4711-ab2d-79f14b467315",
            "cellValue": "selectedDetailsTab",
            "linkTarget": "parameter",
            "linkLabel": "Delays",
            "subTarget": "Delays",
            "style": "link"
          },
          {
            "id": "4baff865-ce57-4b7a-99ad-d5f7c5c4319c",
            "cellValue": "selectedDetailsTab",
            "linkTarget": "parameter",
            "linkLabel": "Link Statistics",
            "subTarget": "Link",
            "style": "link"
          },
          {
            "id": "541e607d-2d55-44be-bb19-a8e9ad872230",
            "cellValue": "selectedDetailsTab",
            "linkTarget": "parameter",
            "linkLabel": "Other Statistics",
            "subTarget": "Other",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Details"
      },
      "name": "links - 6 - Copy"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<h2 style=\"background-color:#b1b1b1; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Traffic Info\r\n</h2>"
            },
            "name": "text - 9"
          },
          {
            "type": 1,
            "content": {
              "json": "<h4 style=\"background-color:#CAEEFB; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Downlink\r\n</h4>"
            },
            "name": "text - 9 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\nlet timeEnd = todatetime({timeparameter:end});\nlet duration = timeEnd - timeStart;\nlet maxPoints = 10000;  // Hard limit for visualization\nlet baseStep = case(\n    duration >= 7d, 15m,\n    duration >= 3d, 4m,     \n    duration >= 48h, 3m, \n    duration >= 24h, 2m,\n    duration >= 12h, 1m, \n    duration >= 4h, 30s,\n    duration >= 1h, 30s,\n    duration >= 15m, 20s,\n    10s  // Default step size\n);\nlet totalPoints = tolong(duration / baseStep);\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\nlet adjustedStep = baseStep * scaleFactor;\njrtc_dashboard_CL\n| where stream_id_s == \"dashboard\"\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\n| where stream_index_s == \"PDCP_DL_STATS\"\n| mv-expand stream_payload_msg.stats\n| extend stats_d = todynamic(stream_payload_msg_stats)\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), totalPduB = todouble(stats_d.sdu_new_bytes.total), pduCount = todouble(stats_d.data_pdu_tx_bytes.count), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\n| where isSRB == 0 // Ignore signalling bearers for data throughput\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\n| project timestamp, imsi_rb = strcat(imsi, \"/\", rbID), totalPduB  // Append bearer ID to IMSI in case there are multiple bearers\n| where timestamp >= timeStart and timestamp <= timeEnd\n| make-series avg_rate_Mbps=avg(totalPduB*8) default=0 \n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\n| render timechart\n",
              "size": 1,
              "title": "Downlink PDCP throughput from SDAP [bps]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "sortBy": [
                  {
                    "itemKey": "timestamp",
                    "sortOrder": 1
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "timestamp",
                  "sortOrder": 1
                }
              ],
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\nlet timeEnd = todatetime({timeparameter:end});\nlet duration = timeEnd - timeStart;\nlet maxPoints = 10000;  // Hard limit for visualization\nlet baseStep = case(\n    duration >= 7d, 15m,\n    duration >= 3d, 4m,     \n    duration >= 48h, 3m, \n    duration >= 24h, 2m,\n    duration >= 12h, 1m, \n    duration >= 4h, 30s,\n    duration >= 1h, 30s,\n    duration >= 15m, 20s,\n    10s  // Default step size\n);\nlet totalPoints = tolong(duration / baseStep);\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\nlet adjustedStep = baseStep * scaleFactor;\njrtc_dashboard_CL\n| where stream_id_s == \"dashboard\"\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\n| where stream_index_s == \"PDCP_DL_STATS\"\n| mv-expand stream_payload_msg.stats\n| extend stats_d = todynamic(stream_payload_msg_stats)\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), totalPduB = todouble(stats_d.sdu_discarded.total), pduCount = todouble(stats_d.data_pdu_tx_bytes.count), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\n| where isSRB == 0 // Ignore signalling bearers for data throughput\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\n| project timestamp, imsi_rb = strcat(imsi, \"/\", rbID), totalPduB  // Append bearer ID to IMSI in case there are multiple bearers\n| where timestamp >= timeStart and timestamp <= timeEnd\n| make-series avg_rate_Mbps=avg(totalPduB*8) default=0 \n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\n| render timechart\n",
              "size": 1,
              "title": "Downlink PDCP discarded from SDAP [bps]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "sortBy": [
                  {
                    "itemKey": "timestamp",
                    "sortOrder": 1
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "timestamp",
                  "sortOrder": 1
                }
              ],
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 2 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgQueue = todouble(stats_d.pdu_window_bytes.avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgQueue, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgQueue=avg(avgQueue) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average PDCP DL queue size [B]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 3"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\nlet timeEnd = todatetime({timeparameter:end});\nlet duration = timeEnd - timeStart;\nlet maxPoints = 10000;  // Hard limit for visualization\nlet baseStep = case(\n    duration >= 7d, 15m,\n    duration >= 3d, 4m,     \n    duration >= 48h, 3m, \n    duration >= 24h, 2m,\n    duration >= 12h, 1m, \n    duration >= 4h, 30s,\n    duration >= 1h, 30s,\n    duration >= 15m, 20s,\n    10s  // Default step size\n);\nlet totalPoints = tolong(duration / baseStep);\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\nlet adjustedStep = baseStep * scaleFactor;\njrtc_dashboard_CL\n| where stream_id_s == \"dashboard\"\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\n| where stream_index_s == \"RLC_DL_STATS\"\n| mv-expand stream_payload_msg.stats\n| extend stats_d = todynamic(stream_payload_msg_stats)\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), totalPduB = todouble(stats_d.pdu_tx_bytes.total), pduCount = todouble(stats_d.data_pdu_tx_bytes.count), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\n| where isSRB == 0 // Ignore signalling bearers for data throughput\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\n| project timestamp, imsi_rb = strcat(imsi, \"/\", rbID), totalPduB  // Append bearer ID to IMSI in case there are multiple bearers\n| where timestamp >= timeStart and timestamp <= timeEnd\n| make-series avg_rate_Mbps=avg(totalPduB*8) default=0 \n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\n| render timechart\n",
              "size": 1,
              "title": "Downlink RLC throughput to MAC [bps]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "sortBy": [
                  {
                    "itemKey": "timestamp",
                    "sortOrder": 1
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "timestamp",
                  "sortOrder": 1
                }
              ],
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 2 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\nlet timeEnd = todatetime({timeparameter:end});\nlet duration = timeEnd - timeStart;\nlet maxPoints = 10000;  // Hard limit for visualization\nlet baseStep = case(\n    duration >= 7d, 15m,\n    duration >= 3d, 4m,     \n    duration >= 48h, 3m, \n    duration >= 24h, 2m,\n    duration >= 12h, 1m, \n    duration >= 4h, 30s,\n    duration >= 1h, 30s,\n    duration >= 15m, 20s,\n    10s  // Default step size\n);\nlet totalPoints = tolong(duration / baseStep);\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\nlet adjustedStep = baseStep * scaleFactor;\njrtc_dashboard_CL\n| where stream_id_s == \"dashboard\"\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\n| where stream_index_s == \"RLC_DL_STATS\"\n| mv-expand stream_payload_msg.stats\n| extend stats_d = todynamic(stream_payload_msg_stats)\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgReTX = todouble(stats_d.pdu_retx_count.avg), pduCount = todouble(stats_d.data_pdu_tx_bytes.count), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\n| where isSRB == 0 // Ignore signalling bearers for data throughput\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\n| project timestamp, imsi_rb = strcat(imsi, \"/\", rbID), avgReTX  // Append bearer ID to IMSI in case there are multiple bearers\n| where timestamp >= timeStart and timestamp <= timeEnd\n| make-series avgReTX=avg(avgReTX) default=0 \n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\n| render timechart\n",
              "size": 1,
              "title": "Downlink RLC average retransmissions per second",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "sortBy": [
                  {
                    "itemKey": "timestamp",
                    "sortOrder": 1
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "timestamp",
                  "sortOrder": 1
                }
              ],
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 2 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgQueue = todouble(stats_d.sdu_queue_bytes.avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgQueue, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgQueue=avg(avgQueue) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average RLC SDU DL queue size [B]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 3 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "<h4 style=\"background-color:#CAEEFB; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Uplink\r\n</h4>"
            },
            "name": "text - 9 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), totalSduB = todouble(stats_d.sdu_delivered_bytes.total), sduCount = todouble(stats_d.sdu_delivered_bytes.count), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project timestamp, imsi_rb = strcat(imsi, \"/\", rbID), totalSduB  // Select relevant columns\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avg_rate_Mbps=avg(totalSduB*8) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Uplink PDCP throughput to SDAP [bps]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 3"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgQueue = todouble(stats_d.pdu_window_bytes.avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgQueue, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgQueue=avg(avgQueue) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average PDCP UL queue size [B]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 3 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), totalSduB = todouble(stats_d.pdu_bytes.total), sduCount = todouble(stats_d.sdu_delivered_bytes.count), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project timestamp, imsi_rb = strcat(imsi, \"/\", rbID), totalSduB  // Select relevant columns\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avg_rate_Mbps=avg(totalSduB*8) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Uplink RLC throughput from MAC [bps]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 3 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgQueue = todouble(stats_d.pdu_window_pkts.avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgQueue, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgQueue=avg(avgQueue) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average RLC PDU UL queue size [pkts]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 3 - Copy - Copy"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedDetailsTab",
          "comparison": "isEqualTo",
          "value": "Traffic"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "Details"
        }
      ],
      "name": "PDCP"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<h2 style=\"background-color:#b1b1b1; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Delays\r\n</h2>"
            },
            "name": "text - 0"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"PDCP_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgDelay = todouble(stats_d.sdu_tx_latency.avg)/1000, timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgDelay, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgDelay=avg(avgDelay) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average PDCP TX downlink latency [us]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "50",
            "name": "query - 3 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_UL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgDelay = todouble(stats_d.sdu_delivered_latency.avg)/1000, timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgDelay, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgDelay=avg(avgDelay) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average RLC uplink latency (from first bit to delivered) [us]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "50",
            "name": "query - 3 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgDelay = todouble(stats_d.sdu_tx_started.avg)/1000000, timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgDelay, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgDelay=avg(avgDelay) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average RLC latency to send first SDU byte to MAC [ms]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 3 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgDelay = todouble(stats_d.sdu_tx_completed.avg)/1000000, timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgDelay, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgDelay=avg(avgDelay) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average RLC latency to send entire SDU to MAC [ms]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 3 - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgDelay = todouble(stats_d.sdu_tx_delivered.avg)/1000000, timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgDelay, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgDelay=avg(avgDelay) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average RLC downlink delivery-to-UE latency [ms]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 3 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UCI_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgSR = todouble(stats_d.sr_detected), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgSR, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgSR=avg(avgSR) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart",
              "size": 1,
              "title": "Uplink MAC scheduling request (SR) per second",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 6 - Copy - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 20s,\r\n    duration >= 1h, 10s,\r\n    duration >= 15m, 2s,\r\n    1s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_BSR_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), bsr = todouble(stats_d.cnt), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, bsr  // Select relevant columns\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series bsr=avg(bsr) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average number of BSR per second per user",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 6 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 20s,\r\n    duration >= 1h, 10s,\r\n    duration >= 15m, 2s,\r\n    1s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_BSR_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), bsr = todouble(stats_d.bytes), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, bsr  // Select relevant columns\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series bsr=avg(bsr) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average BSR size in bytes per user per second ",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 6 - Copy - Copy"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedDetailsTab",
          "comparison": "isEqualTo",
          "value": "Delays"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "Details"
        }
      ],
      "name": "Delays"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<h2 style=\"background-color:#b1b1b1; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Link statistics\r\n</h2>"
            },
            "name": "text - 10"
          },
          {
            "type": 1,
            "content": {
              "json": "<h4 style=\"background-color:#CAEEFB; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Downlink\r\n</h4>"
            },
            "name": "text - 10 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"RLC_DL_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgReTX = todouble(stats_d.pdu_retx_count.avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where isSRB == 0 // Ignore signalling bearers for data throughput\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgReTX, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgReTX=avg(avgReTX) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart",
              "size": 1,
              "title": "Average number of downlink RLC retransmissions",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 6 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UCI_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgCQI = todouble(stats_d.csi.cqi.avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgCQI, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgCQI=avg(avgCQI) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart",
              "size": 1,
              "title": "Average CQI on downlink",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 6 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    10s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"FAPI_DL_CONFIG\"\r\n| mv-expand stream_payload_msg.ues\r\n| extend ues = todynamic(stream_payload_msg_ues)\r\n| extend ueIndex = tostring(ues.ueid), timsi = tostring(ues.ue_ctx.tmsi), supi = tostring(ues.ue_ctx.core_amf_info.supi), l1PrbAvg = todouble(ues.l1_prb_avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, l1PrbAvg  // Select relevant columns\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series l1PrbAvg=avg(l1PrbAvg) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average downlink spectrum utilization (in PRB) per user",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "33",
            "name": "query - 7"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    10s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"FAPI_DL_CONFIG\"\r\n| mv-expand stream_payload_msg.ues\r\n| extend ues = todynamic(stream_payload_msg_ues)\r\n| extend ueIndex = tostring(ues.ueid), timsi = tostring(ues.ue_ctx.tmsi), supi = tostring(ues.ue_ctx.core_amf_info.supi), l1McsAvg = todouble(ues.l1_mcs_avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, l1McsAvg  // Select relevant columns\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series l1McsAvg=avg(l1McsAvg) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average downlink MCS per user",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "33",
            "name": "query - 7 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    10s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"FAPI_DL_CONFIG\"\r\n| mv-expand stream_payload_msg.ues\r\n| extend ues = todynamic(stream_payload_msg_ues)\r\n| extend ueIndex = tostring(ues.ueid), timsi = tostring(ues.ue_ctx.tmsi), supi = tostring(ues.ue_ctx.core_amf_info.supi), l1TbsAvg = todouble(ues.l1_tbs_avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, l1TbsAvg  // Select relevant columns\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series l1TbsAvg=avg(l1TbsAvg) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average downlink transport block size per user",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "33",
            "name": "query - 7 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UCI_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), isSRB = toint(stats_d.is_srb), rbID = tostring(stats_d.rb_id), avgCSIRI = todouble(stats_d.csi.ri.avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| project imsi_rb = strcat(imsi, \"/\", rbID), avgCSIRI, timestamp\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series avgCSIRI=avg(avgCSIRI) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi_rb\r\n| render timechart\r\n\r\n\r\n// let timeStart = todatetime({timeparameter:start});\r\n// let timeEnd = todatetime({timeparameter:end});\r\n// let duration = timeEnd - timeStart;\r\n// let maxPoints = 10000;  // Hard limit for visualization\r\n// let baseStep = case(\r\n//     duration >= 7d, 15m,\r\n//     duration >= 3d, 8m,     \r\n//     duration >= 48h, 4m, \r\n//     duration >= 24h, 2m,\r\n//     duration >= 12h, 1m, \r\n//     duration >= 4h, 30s,\r\n//     duration >= 1h, 30s,\r\n//     duration >= 15m, 20s,\r\n//     10s  // Default step size\r\n// );\r\n// let totalPoints = tolong(duration / baseStep);\r\n// let scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\n// let adjustedStep = baseStep * scaleFactor;\r\n// jrtc_dashboard_CL\r\n// | where stream_id_s == \"dashboard\"\r\n// | extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n// | extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n// | where stream_index_s == \"FAPI_DL_CONFIG\"\r\n// | mv-expand stream_payload_msg.ues\r\n// | extend ues = todynamic(stream_payload_msg_ues)\r\n// | extend ueIndex = tostring(ues.ueid), timsi = tostring(ues.ue_ctx.tmsi), supi = tostring(ues.ue_ctx.core_amf_info.supi), l1AntAvg = todouble(ues.l1_ant_avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n// | extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n// | project timestamp, imsi, l1AntAvg  // Select relevant columns\r\n// | where timestamp >= timeStart and timestamp <= timeEnd\r\n// | make-series l1AntAvg=avg(l1AntAvg) default=0 \r\n//   on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n// | render timechart\r\n",
              "size": 1,
              "title": "Average number of streams per user on downlink (MAC)",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "33",
            "name": "query - 7 - Copy - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_DL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend txCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts), reTxCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series tx=sum(txCount), reTx=sum(reTxCount) default=0 \r\n    on timestamp \r\n    from timeStart to timeEnd \r\n    step adjustedStep \r\n    by imsi\r\n| extend zipped = zip(timestamp, tx, reTx)\r\n| mv-expand point = zipped\r\n| extend timestamp = todatetime(point[0]),\r\n         txVal = todouble(point[1]),\r\n         reTxVal = todouble(point[2])\r\n| extend failureRate = iif(txVal + reTxVal == 0, 0.0, reTxVal  * 100.0 / (txVal + reTxVal))\r\n| project imsi, timestamp, failureRate\r\n| render timechart\r\n\r\n",
              "size": 1,
              "title": "MAC DL HARQ Failure rates",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 6 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_DL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend failureCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_FAILURE.tbs.pkts)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series failures=sum(failureCount) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n\r\n",
              "size": 1,
              "title": "Number of MAC DL HARQ Process failures",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 6 - Copy - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_DL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend txCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.bytes)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series Tx=sum(txCount) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| mv-expand timestamp to typeof(datetime), Tx to typeof(long)\r\n| extend Mbps = Tx * 8.0 / (adjustedStep / 1s) / 1000000.0\r\n| project imsi, timestamp, Mbps\r\n| render timechart\r\n\r\n\r\n",
              "size": 1,
              "title": "MAC DL HARQ TBS Tx Mbps",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 6 - Copy - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_DL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend reTxCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.bytes)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series reTx=sum(reTxCount) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| mv-expand timestamp to typeof(datetime), reTx to typeof(long)\r\n| extend Mbps = reTx * 8.0 / (adjustedStep / 1s) / 1000000.0\r\n| project imsi, timestamp, Mbps\r\n| render timechart\r\n\r\n\r\n",
              "size": 1,
              "title": "MAC DL HARQ TBS ReTx Mbps",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 6 - Copy - Copy - Copy - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "<h4 style=\"background-color:#CAEEFB; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Uplink\r\n</h4>"
            },
            "name": "text - 10 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), maxSinr = todouble(stats_d.max_sinr), minSinr = todouble(stats_d.min_sinr), avgSinr = todouble(stats_d.avg_sinr), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, maxSinr, avgSinr  // Select relevant columns\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd and not(isempty(imsi))\r\n| make-series avgSinr=avg(avgSinr) default=-65.0\r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Avg uplink SINR [dB]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "customThresholdLine": "10",
                "customThresholdLineStyle": 5,
                "ySettings": {
                  "min": -66,
                  "max": 66,
                  "label": ""
                }
              }
            },
            "customWidth": "33",
            "name": "query - 4"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "\r\nlet timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), maxRsrp = todouble(stats_d.max_rsrp), minRsrp = todouble(stats_d.min_rsrp), avgRsrp = todouble(stats_d.avg_rsrp), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, maxRsrp, avgRsrp  // Select relevant columns\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd and not(isempty(imsi))\r\n| make-series avgRsrp=avg(avgRsrp) default=-128\r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n\r\n",
              "size": 1,
              "title": "Avg uplink RSRP [dBm]",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "customThresholdLine": "-80",
                "customThresholdLineStyle": 5
              }
            },
            "customWidth": "33",
            "name": "query - 4 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 20s,\r\n    duration >= 1h, 10s,\r\n    duration >= 15m, 2s,\r\n    1s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_CRC_STATS\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), consMax = todouble(stats_d.cons_max), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, consMax  // Select relevant columns\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series consMax=avg(consMax) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Maximum consecutive uplink MAC level retransmissions",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "33",
            "name": "query - 6"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    10s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"FAPI_UL_CONFIG\"\r\n| mv-expand stream_payload_msg.ues\r\n| extend ues = todynamic(stream_payload_msg_ues)\r\n| extend ueIndex = tostring(ues.ueid), timsi = tostring(ues.ue_ctx.tmsi), supi = tostring(ues.ue_ctx.core_amf_info.supi), l1PrbAvg = todouble(ues.l1_prb_avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, l1PrbAvg  // Select relevant columns\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series l1PrbAvg=avg(l1PrbAvg) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average uplink spectrum utilization (in PRB) per user",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "25",
            "name": "query - 7 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    10s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"FAPI_UL_CONFIG\"\r\n| mv-expand stream_payload_msg.ues\r\n| extend ues = todynamic(stream_payload_msg_ues)\r\n| extend ueIndex = tostring(ues.ueid), timsi = tostring(ues.ue_ctx.tmsi), supi = tostring(ues.ue_ctx.core_amf_info.supi), l1McsAvg = todouble(ues.l1_mcs_avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, l1McsAvg  // Select relevant columns\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series l1McsAvg=avg(l1McsAvg) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average uplink MCS per user",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "25",
            "name": "query - 7 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    10s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"FAPI_UL_CONFIG\"\r\n| mv-expand stream_payload_msg.ues\r\n| extend ues = todynamic(stream_payload_msg_ues)\r\n| extend ueIndex = tostring(ues.ueid), timsi = tostring(ues.ue_ctx.tmsi), supi = tostring(ues.ue_ctx.core_amf_info.supi), l1TbsAvg = todouble(ues.l1_tbs_avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, l1TbsAvg  // Select relevant columns\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series l1TbsAvg=avg(l1TbsAvg) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average uplink transport block size per user",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "25",
            "name": "query - 7 - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    10s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"FAPI_UL_CONFIG\"\r\n| mv-expand stream_payload_msg.ues\r\n| extend ues = todynamic(stream_payload_msg_ues)\r\n| extend ueIndex = tostring(ues.ueid), timsi = tostring(ues.ue_ctx.tmsi), supi = tostring(ues.ue_ctx.core_amf_info.supi), l1AntAvg = todouble(ues.l1_ant_avg), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi, l1AntAvg  // Select relevant columns\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series l1AntAvg=avg(l1AntAvg) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Average number of streams per user on uplink",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "25",
            "name": "query - 7 - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend txCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.pkts), reTxCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.pkts)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series tx=sum(txCount), reTx=sum(reTxCount) default=0 \r\n    on timestamp \r\n    from timeStart to timeEnd \r\n    step adjustedStep \r\n    by imsi\r\n| extend zipped = zip(timestamp, tx, reTx)\r\n| mv-expand point = zipped\r\n| extend timestamp = todatetime(point[0]),\r\n         txVal = todouble(point[1]),\r\n         reTxVal = todouble(point[2])\r\n| extend failureRate = iif(txVal + reTxVal == 0, 0.0, reTxVal * 100.0 / (txVal + reTxVal))\r\n| project imsi, timestamp, failureRate\r\n| render timechart\r\n\r\n",
              "size": 1,
              "title": "MAC UL HARQ Failure rates",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 6 - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend failureCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_FAILURE.tbs.pkts)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series failures=sum(failureCount) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n\r\n",
              "size": 1,
              "title": "Number of MAC UL HARQ Process failures",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 6 - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend txCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_TX.tbs.bytes)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series Tx=sum(txCount) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| mv-expand timestamp to typeof(datetime), Tx to typeof(long)\r\n| extend Mbps = Tx * 8.0 / (adjustedStep / 1s) / 1000000.0\r\n| project imsi, timestamp, Mbps\r\n| render timechart\r\n\r\n\r\n",
              "size": 1,
              "title": "MAC UL HARQ TBS Tx Mbps",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 6 - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 6m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 30s,\r\n    duration >= 1h, 30s,\r\n    duration >= 15m, 20s,\r\n    20s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"MAC_SCHED_UL_HARQ\"\r\n| mv-expand stream_payload_msg.stats\r\n| extend stats_d = todynamic(stream_payload_msg_stats)\r\n| extend ueIndex = tostring(stats_d.ueid), timsi = tostring(stats_d.ue_ctx.tmsi), supi = tostring(stats_d.ue_ctx.core_amf_info.supi), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| extend reTxCount=toint(stats_d.perHarqTypeStats.MAC_HARQ_EVENT_RETX.tbs.bytes)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi)) // Only include UEs connected for a longer time\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series reTx=sum(reTxCount) default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| mv-expand timestamp to typeof(datetime), reTx to typeof(long)\r\n| extend Mbps = reTx * 8.0 / (adjustedStep / 1s) / 1000000.0\r\n| project imsi, timestamp, Mbps\r\n| render timechart\r\n\r\n\r\n",
              "size": 1,
              "title": "MAC UL HARQ TBS ReTx Mbps",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true,
                "ySettings": {
                  "min": 0
                }
              }
            },
            "customWidth": "25",
            "name": "query - 6 - Copy - Copy - Copy - Copy - Copy"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedDetailsTab",
          "comparison": "isEqualTo",
          "value": "Link"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "Details"
        }
      ],
      "name": "Link"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<h2 style=\"background-color:#b1b1b1; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Other statistics\r\n</h2>"
            },
            "name": "text - 11"
          },
          {
            "type": 1,
            "content": {
              "json": "<h4 style=\"background-color:#CAEEFB; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Signalling\r\n</h4>"
            },
            "name": "text - 4"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 20s,\r\n    duration >= 1h, 4s,\r\n    duration >= 15m, 2s,\r\n    1s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where substring(stream_index_s, 0, 6) == \"RRC_UE\"\r\n| extend stream_payload_msg_d = todynamic(stream_payload_msg)\r\n| extend timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)), timsi = tostring(stream_payload_msg_d.ue_ctx.tmsi), supi = tostring(stream_payload_msg_d.ue_ctx.core_amf_info.supi)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| project timestamp, imsi  // Select relevant columns\r\n| where not(isempty(imsi))\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| make-series signalling=count() default=0 \r\n  on timestamp from timeStart to timeEnd step adjustedStep by imsi\r\n| render timechart\r\n",
              "size": 1,
              "title": "Number of signalling (RRC) messages per UE",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "50",
            "name": "query - 8"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\nlet duration = timeEnd - timeStart;\r\nlet maxPoints = 10000;  // Hard limit for visualization\r\nlet baseStep = case(\r\n    duration >= 7d, 15m,\r\n    duration >= 3d, 8m,     \r\n    duration >= 48h, 4m, \r\n    duration >= 24h, 2m,\r\n    duration >= 12h, 1m, \r\n    duration >= 4h, 20s,\r\n    duration >= 1h, 4s,\r\n    duration >= 15m, 2s,\r\n    1s  // Default step size\r\n);\r\nlet totalPoints = tolong(duration / baseStep);\r\nlet scaleFactor = ceiling(totalPoints * 1.0 / maxPoints);  // Ensure step scaling\r\nlet adjustedStep = baseStep * scaleFactor;\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where substring(stream_index_s, 0, 6) == \"RRC_UE\"\r\n| extend stream_payload_msg_d = todynamic(stream_payload_msg)\r\n| extend timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp)), timsi = tostring(stream_payload_msg_d.ue_ctx.tmsi), supi = tostring(stream_payload_msg_d.ue_ctx.core_amf_info.supi)\r\n| extend imsi = iff(not(isempty(supi)), substring(supi, 5), timsi)\r\n| where not(isempty(imsi))\r\n| project timestamp, imsi=tostring(imsi), stream_index_s\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| summarize count() by imsi, stream_index_s\r\n| evaluate pivot(stream_index_s, sum(count_))\r\n| render barchart // Bar chart doesn't support strings on x axis...\r\n\r\n",
              "size": 1,
              "title": "Number of signalling (RRC) messages per UE",
              "timeContextFromParameter": "timeparameter",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "chartSettings": {
                "showMetrics": false,
                "showLegend": true
              }
            },
            "customWidth": "50",
            "name": "query - 8 - Copy"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<h4 style=\"background-color:#CAEEFB; color:#222; padding:3px 12px; text-align:left; \r\n            border-left:5px solid #005a9c; border-radius:3px; \r\n            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.15);\">\r\n    Codelet Runtimes\r\n</h4>"
                  },
                  "name": "text - 0"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"JBPF_STATS_REPORT\"\r\n| mv-expand stream_payload_msg.perfs\r\n| extend perfs_d = todynamic(stream_payload_msg_perfs)\r\n| project hookName = tostring(perfs_d.hook_name), maxValue = toint(perfs_d.p99), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| summarize val=percentile(maxValue/1000, 99) by hookName  // Get the maximum \"max\" value per hookName\r\n| top 10 by val desc\r\n| render barchart",
                    "size": 1,
                    "title": "99% hook latency [us]",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "chartSettings": {
                      "showMetrics": false,
                      "ySettings": {
                        "min": 0
                      }
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 12 - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let timeStart = todatetime({timeparameter:start});\r\nlet timeEnd = todatetime({timeparameter:end});\r\njrtc_dashboard_CL\r\n| where stream_id_s == \"dashboard\"\r\n| extend stream_payload_msg=todynamic(stream_payload_msg_s)  // Expand the array of stats_s into individual rows\r\n| extend stream_index_s = tostring(stream_payload_msg.stream_index)\r\n| where stream_index_s == \"JBPF_STATS_REPORT\"\r\n| mv-expand stream_payload_msg.perfs\r\n| extend perfs_d = todynamic(stream_payload_msg_perfs)\r\n| project hookName = tostring(perfs_d.hook_name), maxValue = toint(perfs_d.p90), timestamp = unixtime_nanoseconds_todatetime(tolong(stream_payload_msg.timestamp))\r\n| where timestamp >= timeStart and timestamp <= timeEnd\r\n| summarize val=percentile(maxValue/1000, 90) by hookName  // Get the maximum \"max\" value per hookName\r\n| top 10 by val desc\r\n| render barchart",
                    "size": 1,
                    "title": "90% hook latency [us]",
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "chartSettings": {
                      "showMetrics": false,
                      "ySettings": {
                        "min": 0
                      }
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 12 - Copy - Copy"
                }
              ]
            },
            "name": "group - 14"
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "selectedDetailsTab",
          "comparison": "isEqualTo",
          "value": "Other"
        },
        {
          "parameterName": "selectedTab",
          "comparison": "isEqualTo",
          "value": "Details"
        }
      ],
      "name": "Other"
    }
  ],
  "fallbackResourceIds": [
    "/subscriptions/8bb381b1-de12-4fb7-a019-aeeeb2071090/resourceGroups/cambridge-lab-external/providers/Microsoft.OperationalInsights/workspaces/Monitoring"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}